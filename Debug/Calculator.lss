
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000030e2  00003176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080017e  0080017e  00003294  2**0
                  ALLOC
  3 .stab         0000276c  00000000  00000000  00003294  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000154f  00000000  00000000  00005a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000070ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000072df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000096eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000aa62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bc3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000c0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cabd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 12 	call	0x2518	; 0x2518 <main>
      8a:	0c 94 6f 18 	jmp	0x30de	; 0x30de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_u8SetPinDirection>:
#include"../../lib/STD_TYPES.h"
#include"DIO_interface.h"
#include"DIO_registers.h"

/*Set direction of any pin on any port*/
u8 DIO_u8SetPinDirection(enum_port Copy_enuPort, enum_pin Copy_enuPin, enum_direction Copy_enuDirection){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	28 97       	sbiw	r28, 0x08	; 8
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	6a 83       	std	Y+2, r22	; 0x02
     e10:	4b 83       	std	Y+3, r20	; 0x03
/*Input*/
	if(Copy_enuDirection== pinInput){
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 23       	and	r24, r24
     e16:	09 f0       	breq	.+2      	; 0xe1a <DIO_u8SetPinDirection+0x22>
     e18:	74 c0       	rjmp	.+232    	; 0xf02 <DIO_u8SetPinDirection+0x10a>
		switch(Copy_enuPort){
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3f 83       	std	Y+7, r19	; 0x07
     e22:	2e 83       	std	Y+6, r18	; 0x06
     e24:	8e 81       	ldd	r24, Y+6	; 0x06
     e26:	9f 81       	ldd	r25, Y+7	; 0x07
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	91 05       	cpc	r25, r1
     e2c:	59 f1       	breq	.+86     	; 0xe84 <DIO_u8SetPinDirection+0x8c>
     e2e:	2e 81       	ldd	r18, Y+6	; 0x06
     e30:	3f 81       	ldd	r19, Y+7	; 0x07
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	31 05       	cpc	r19, r1
     e36:	2c f4       	brge	.+10     	; 0xe42 <DIO_u8SetPinDirection+0x4a>
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	9f 81       	ldd	r25, Y+7	; 0x07
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	69 f0       	breq	.+26     	; 0xe5a <DIO_u8SetPinDirection+0x62>
     e40:	d2 c0       	rjmp	.+420    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
     e42:	2e 81       	ldd	r18, Y+6	; 0x06
     e44:	3f 81       	ldd	r19, Y+7	; 0x07
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	89 f1       	breq	.+98     	; 0xeae <DIO_u8SetPinDirection+0xb6>
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	9f 81       	ldd	r25, Y+7	; 0x07
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	91 05       	cpc	r25, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <DIO_u8SetPinDirection+0x60>
     e56:	40 c0       	rjmp	.+128    	; 0xed8 <DIO_u8SetPinDirection+0xe0>
     e58:	c6 c0       	rjmp	.+396    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		case portA: CLR_BIT(DDRA,Copy_enuPin);break;
     e5a:	aa e3       	ldi	r26, 0x3A	; 58
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ea e3       	ldi	r30, 0x3A	; 58
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_u8SetPinDirection+0x80>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_u8SetPinDirection+0x7c>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	b1 c0       	rjmp	.+354    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		case portB: CLR_BIT(DDRB,Copy_enuPin);break;
     e84:	a7 e3       	ldi	r26, 0x37	; 55
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e3       	ldi	r30, 0x37	; 55
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_u8SetPinDirection+0xaa>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_u8SetPinDirection+0xa6>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	9c c0       	rjmp	.+312    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		case portC: CLR_BIT(DDRC,Copy_enuPin);break;
     eae:	a4 e3       	ldi	r26, 0x34	; 52
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e4 e3       	ldi	r30, 0x34	; 52
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_u8SetPinDirection+0xd4>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_u8SetPinDirection+0xd0>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	87 c0       	rjmp	.+270    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		case portD: CLR_BIT(DDRD,Copy_enuPin);break;
     ed8:	a1 e3       	ldi	r26, 0x31	; 49
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e1 e3       	ldi	r30, 0x31	; 49
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_u8SetPinDirection+0xfe>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_u8SetPinDirection+0xfa>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	72 c0       	rjmp	.+228    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		}

	}
/*Output*/
	else if(Copy_enuDirection== pinOutput){
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	09 f0       	breq	.+2      	; 0xf0a <DIO_u8SetPinDirection+0x112>
     f08:	6e c0       	rjmp	.+220    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		switch(Copy_enuPort){
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	3d 83       	std	Y+5, r19	; 0x05
     f12:	2c 83       	std	Y+4, r18	; 0x04
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	9d 81       	ldd	r25, Y+5	; 0x05
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	91 05       	cpc	r25, r1
     f1c:	49 f1       	breq	.+82     	; 0xf70 <DIO_u8SetPinDirection+0x178>
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	2c f4       	brge	.+10     	; 0xf32 <DIO_u8SetPinDirection+0x13a>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	61 f0       	breq	.+24     	; 0xf48 <DIO_u8SetPinDirection+0x150>
     f30:	5a c0       	rjmp	.+180    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	71 f1       	breq	.+92     	; 0xf98 <DIO_u8SetPinDirection+0x1a0>
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	9d 81       	ldd	r25, Y+5	; 0x05
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	91 05       	cpc	r25, r1
     f44:	e9 f1       	breq	.+122    	; 0xfc0 <DIO_u8SetPinDirection+0x1c8>
     f46:	4f c0       	rjmp	.+158    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		case portA: SET_BIT(DDRA,Copy_enuPin);break;
     f48:	aa e3       	ldi	r26, 0x3A	; 58
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea e3       	ldi	r30, 0x3A	; 58
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_u8SetPinDirection+0x16e>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_u8SetPinDirection+0x16a>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	3b c0       	rjmp	.+118    	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		case portB: SET_BIT(DDRB,Copy_enuPin);break;
     f70:	a7 e3       	ldi	r26, 0x37	; 55
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e7 e3       	ldi	r30, 0x37	; 55
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_u8SetPinDirection+0x196>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_u8SetPinDirection+0x192>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	27 c0       	rjmp	.+78     	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		case portC: SET_BIT(DDRC,Copy_enuPin);break;
     f98:	a4 e3       	ldi	r26, 0x34	; 52
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e4 e3       	ldi	r30, 0x34	; 52
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_u8SetPinDirection+0x1be>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_u8SetPinDirection+0x1ba>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	13 c0       	rjmp	.+38     	; 0xfe6 <DIO_u8SetPinDirection+0x1ee>
		case portD: SET_BIT(DDRD,Copy_enuPin);break;
     fc0:	a1 e3       	ldi	r26, 0x31	; 49
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e3       	ldi	r30, 0x31	; 49
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_u8SetPinDirection+0x1e6>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_u8SetPinDirection+0x1e2>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
		}

	}
}
     fe6:	28 96       	adiw	r28, 0x08	; 8
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <DIO_u8SetPinValue>:

/*Set any pin value in any port*/
u8 DIO_u8SetPinValue(enum_port Copy_enuPort, enum_pin Copy_enuPin, enum_value Copy_enuvalue){
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	28 97       	sbiw	r28, 0x08	; 8
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	6a 83       	std	Y+2, r22	; 0x02
    1010:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_enuvalue == pinHigh){
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	09 f0       	breq	.+2      	; 0x101a <DIO_u8SetPinValue+0x22>
    1018:	6f c0       	rjmp	.+222    	; 0x10f8 <DIO_u8SetPinValue+0x100>
		switch (Copy_enuPort){
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3f 83       	std	Y+7, r19	; 0x07
    1022:	2e 83       	std	Y+6, r18	; 0x06
    1024:	8e 81       	ldd	r24, Y+6	; 0x06
    1026:	9f 81       	ldd	r25, Y+7	; 0x07
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	49 f1       	breq	.+82     	; 0x1080 <DIO_u8SetPinValue+0x88>
    102e:	2e 81       	ldd	r18, Y+6	; 0x06
    1030:	3f 81       	ldd	r19, Y+7	; 0x07
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <DIO_u8SetPinValue+0x4a>
    1038:	8e 81       	ldd	r24, Y+6	; 0x06
    103a:	9f 81       	ldd	r25, Y+7	; 0x07
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	61 f0       	breq	.+24     	; 0x1058 <DIO_u8SetPinValue+0x60>
    1040:	d2 c0       	rjmp	.+420    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
    1042:	2e 81       	ldd	r18, Y+6	; 0x06
    1044:	3f 81       	ldd	r19, Y+7	; 0x07
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	71 f1       	breq	.+92     	; 0x10a8 <DIO_u8SetPinValue+0xb0>
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	83 30       	cpi	r24, 0x03	; 3
    1052:	91 05       	cpc	r25, r1
    1054:	e9 f1       	breq	.+122    	; 0x10d0 <DIO_u8SetPinValue+0xd8>
    1056:	c7 c0       	rjmp	.+398    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		case portA: SET_BIT(PORTA,Copy_enuPin);break;
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_u8SetPinValue+0x7e>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_u8SetPinValue+0x7a>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	b3 c0       	rjmp	.+358    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		case portB: SET_BIT(PORTB,Copy_enuPin);break;
    1080:	a8 e3       	ldi	r26, 0x38	; 56
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e8 e3       	ldi	r30, 0x38	; 56
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_u8SetPinValue+0xa6>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_u8SetPinValue+0xa2>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	9f c0       	rjmp	.+318    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		case portC: SET_BIT(PORTC,Copy_enuPin);break;
    10a8:	a5 e3       	ldi	r26, 0x35	; 53
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e5 e3       	ldi	r30, 0x35	; 53
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8SetPinValue+0xce>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8SetPinValue+0xca>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	8b c0       	rjmp	.+278    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		case portD: SET_BIT(PORTD,Copy_enuPin);break;
    10d0:	a2 e3       	ldi	r26, 0x32	; 50
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e2 e3       	ldi	r30, 0x32	; 50
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_u8SetPinValue+0xf6>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_u8SetPinValue+0xf2>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	77 c0       	rjmp	.+238    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		}
	}
	else if (Copy_enuvalue==pinLow){
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <DIO_u8SetPinValue+0x108>
    10fe:	73 c0       	rjmp	.+230    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		switch(Copy_enuPort){
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3d 83       	std	Y+5, r19	; 0x05
    1108:	2c 83       	std	Y+4, r18	; 0x04
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	59 f1       	breq	.+86     	; 0x116a <DIO_u8SetPinValue+0x172>
    1114:	2c 81       	ldd	r18, Y+4	; 0x04
    1116:	3d 81       	ldd	r19, Y+5	; 0x05
    1118:	22 30       	cpi	r18, 0x02	; 2
    111a:	31 05       	cpc	r19, r1
    111c:	2c f4       	brge	.+10     	; 0x1128 <DIO_u8SetPinValue+0x130>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	69 f0       	breq	.+26     	; 0x1140 <DIO_u8SetPinValue+0x148>
    1126:	5f c0       	rjmp	.+190    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
    1128:	2c 81       	ldd	r18, Y+4	; 0x04
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	89 f1       	breq	.+98     	; 0x1194 <DIO_u8SetPinValue+0x19c>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <DIO_u8SetPinValue+0x146>
    113c:	40 c0       	rjmp	.+128    	; 0x11be <DIO_u8SetPinValue+0x1c6>
    113e:	53 c0       	rjmp	.+166    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		case portA: CLR_BIT(PORTA,Copy_enuPin);break;
    1140:	ab e3       	ldi	r26, 0x3B	; 59
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_u8SetPinValue+0x166>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_u8SetPinValue+0x162>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	3e c0       	rjmp	.+124    	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		case portB: CLR_BIT(PORTB,Copy_enuPin);break;
    116a:	a8 e3       	ldi	r26, 0x38	; 56
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 e3       	ldi	r30, 0x38	; 56
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8SetPinValue+0x190>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8SetPinValue+0x18c>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	29 c0       	rjmp	.+82     	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		case portC: CLR_BIT(PORTC,Copy_enuPin);break;
    1194:	a5 e3       	ldi	r26, 0x35	; 53
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e3       	ldi	r30, 0x35	; 53
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_u8SetPinValue+0x1ba>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_u8SetPinValue+0x1b6>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <DIO_u8SetPinValue+0x1ee>
		case portD: CLR_BIT(PORTD,Copy_enuPin);break;
    11be:	a2 e3       	ldi	r26, 0x32	; 50
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e2 e3       	ldi	r30, 0x32	; 50
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_u8SetPinValue+0x1e4>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_u8SetPinValue+0x1e0>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
		}
	}

}
    11e6:	28 96       	adiw	r28, 0x08	; 8
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <DIO_u8GetPinValue>:

/*Read any pin value in any port*/
u8 DIO_u8GetPinValue(enum_port Copy_enuPort, enum_pin Copy_enuPin, u8 *pu8Value){
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	27 97       	sbiw	r28, 0x07	; 7
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	6a 83       	std	Y+2, r22	; 0x02
    1210:	5c 83       	std	Y+4, r21	; 0x04
    1212:	4b 83       	std	Y+3, r20	; 0x03

	switch (Copy_enuPort){
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3e 83       	std	Y+6, r19	; 0x06
    121c:	2d 83       	std	Y+5, r18	; 0x05
    121e:	4d 81       	ldd	r20, Y+5	; 0x05
    1220:	5e 81       	ldd	r21, Y+6	; 0x06
    1222:	41 30       	cpi	r20, 0x01	; 1
    1224:	51 05       	cpc	r21, r1
    1226:	59 f1       	breq	.+86     	; 0x127e <DIO_u8GetPinValue+0x86>
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	91 05       	cpc	r25, r1
    1230:	34 f4       	brge	.+12     	; 0x123e <DIO_u8GetPinValue+0x46>
    1232:	2d 81       	ldd	r18, Y+5	; 0x05
    1234:	3e 81       	ldd	r19, Y+6	; 0x06
    1236:	21 15       	cp	r18, r1
    1238:	31 05       	cpc	r19, r1
    123a:	69 f0       	breq	.+26     	; 0x1256 <DIO_u8GetPinValue+0x5e>
    123c:	5b c0       	rjmp	.+182    	; 0x12f4 <DIO_u8GetPinValue+0xfc>
    123e:	4d 81       	ldd	r20, Y+5	; 0x05
    1240:	5e 81       	ldd	r21, Y+6	; 0x06
    1242:	42 30       	cpi	r20, 0x02	; 2
    1244:	51 05       	cpc	r21, r1
    1246:	79 f1       	breq	.+94     	; 0x12a6 <DIO_u8GetPinValue+0xae>
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <DIO_u8GetPinValue+0x5c>
    1252:	3d c0       	rjmp	.+122    	; 0x12ce <DIO_u8GetPinValue+0xd6>
    1254:	4f c0       	rjmp	.+158    	; 0x12f4 <DIO_u8GetPinValue+0xfc>
	case portA: *pu8Value=GET_BIT(PINA,Copy_enuPin);break;
    1256:	e9 e3       	ldi	r30, 0x39	; 57
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a9 01       	movw	r20, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8GetPinValue+0x76>
    126a:	55 95       	asr	r21
    126c:	47 95       	ror	r20
    126e:	8a 95       	dec	r24
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_u8GetPinValue+0x72>
    1272:	ca 01       	movw	r24, r20
    1274:	81 70       	andi	r24, 0x01	; 1
    1276:	eb 81       	ldd	r30, Y+3	; 0x03
    1278:	fc 81       	ldd	r31, Y+4	; 0x04
    127a:	80 83       	st	Z, r24
    127c:	3b c0       	rjmp	.+118    	; 0x12f4 <DIO_u8GetPinValue+0xfc>
	case portB: *pu8Value=GET_BIT(PINB,Copy_enuPin);break;
    127e:	e6 e3       	ldi	r30, 0x36	; 54
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_u8GetPinValue+0x9e>
    1292:	55 95       	asr	r21
    1294:	47 95       	ror	r20
    1296:	8a 95       	dec	r24
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_u8GetPinValue+0x9a>
    129a:	ca 01       	movw	r24, r20
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	eb 81       	ldd	r30, Y+3	; 0x03
    12a0:	fc 81       	ldd	r31, Y+4	; 0x04
    12a2:	80 83       	st	Z, r24
    12a4:	27 c0       	rjmp	.+78     	; 0x12f4 <DIO_u8GetPinValue+0xfc>
	case portC: *pu8Value=GET_BIT(PINC,Copy_enuPin);break;
    12a6:	e3 e3       	ldi	r30, 0x33	; 51
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8GetPinValue+0xc6>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8GetPinValue+0xc2>
    12c2:	ca 01       	movw	r24, r20
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	eb 81       	ldd	r30, Y+3	; 0x03
    12c8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ca:	80 83       	st	Z, r24
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <DIO_u8GetPinValue+0xfc>
	case portD: *pu8Value=GET_BIT(PIND,Copy_enuPin);break;
    12ce:	e0 e3       	ldi	r30, 0x30	; 48
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a9 01       	movw	r20, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_u8GetPinValue+0xee>
    12e2:	55 95       	asr	r21
    12e4:	47 95       	ror	r20
    12e6:	8a 95       	dec	r24
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_u8GetPinValue+0xea>
    12ea:	ca 01       	movw	r24, r20
    12ec:	81 70       	andi	r24, 0x01	; 1
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	80 83       	st	Z, r24
	}
}
    12f4:	27 96       	adiw	r28, 0x07	; 7
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <DIO_u8SetPortDirection>:
/*-----------------------------------------------------------------------------------------------------------*/
/*Set any port direction*/
u8 DIO_u8SetPortDirection(enum_port Copy_enuPort,enum_direction Copy_u8GeneralIO){
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_u8SetPortDirection+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <DIO_u8SetPortDirection+0x8>
    130e:	0f 92       	push	r0
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_enuPort){
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3c 83       	std	Y+4, r19	; 0x04
    1320:	2b 83       	std	Y+3, r18	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	d1 f0       	breq	.+52     	; 0x1360 <DIO_u8SetPortDirection+0x5a>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <DIO_u8SetPortDirection+0x3a>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 f0       	breq	.+24     	; 0x1356 <DIO_u8SetPortDirection+0x50>
    133e:	1e c0       	rjmp	.+60     	; 0x137c <DIO_u8SetPortDirection+0x76>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <DIO_u8SetPortDirection+0x64>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <DIO_u8SetPortDirection+0x6e>
    1354:	13 c0       	rjmp	.+38     	; 0x137c <DIO_u8SetPortDirection+0x76>
		case portA: DDRA=Copy_u8GeneralIO;break;
    1356:	ea e3       	ldi	r30, 0x3A	; 58
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	0e c0       	rjmp	.+28     	; 0x137c <DIO_u8SetPortDirection+0x76>
		case portB: DDRB=Copy_u8GeneralIO;break;
    1360:	e7 e3       	ldi	r30, 0x37	; 55
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	09 c0       	rjmp	.+18     	; 0x137c <DIO_u8SetPortDirection+0x76>
		case portC: DDRC=Copy_u8GeneralIO;break;
    136a:	e4 e3       	ldi	r30, 0x34	; 52
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
    1372:	04 c0       	rjmp	.+8      	; 0x137c <DIO_u8SetPortDirection+0x76>
		case portD: DDRD=Copy_u8GeneralIO;break;
    1374:	e1 e3       	ldi	r30, 0x31	; 49
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
	}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_u8SetPortValue>:

/*Set any port value*/
u8 DIO_u8SetPortValue(enum_port Copy_enuPort,enum_value Copy_u8GeneralValue){
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_u8SetPortValue+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_u8SetPortValue+0x8>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6a 83       	std	Y+2, r22	; 0x02

		switch(Copy_enuPort){
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3c 83       	std	Y+4, r19	; 0x04
    13a6:	2b 83       	std	Y+3, r18	; 0x03
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	d1 f0       	breq	.+52     	; 0x13e6 <DIO_u8SetPortValue+0x5a>
    13b2:	2b 81       	ldd	r18, Y+3	; 0x03
    13b4:	3c 81       	ldd	r19, Y+4	; 0x04
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <DIO_u8SetPortValue+0x3a>
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	61 f0       	breq	.+24     	; 0x13dc <DIO_u8SetPortValue+0x50>
    13c4:	1e c0       	rjmp	.+60     	; 0x1402 <DIO_u8SetPortValue+0x76>
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	81 f0       	breq	.+32     	; 0x13f0 <DIO_u8SetPortValue+0x64>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	81 f0       	breq	.+32     	; 0x13fa <DIO_u8SetPortValue+0x6e>
    13da:	13 c0       	rjmp	.+38     	; 0x1402 <DIO_u8SetPortValue+0x76>
			case portA: PORTA=Copy_u8GeneralValue;break;
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	80 83       	st	Z, r24
    13e4:	0e c0       	rjmp	.+28     	; 0x1402 <DIO_u8SetPortValue+0x76>
			case portB: PORTB=Copy_u8GeneralValue;break;
    13e6:	e8 e3       	ldi	r30, 0x38	; 56
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	80 83       	st	Z, r24
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <DIO_u8SetPortValue+0x76>
			case portC: PORTC=Copy_u8GeneralValue;break;
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	80 83       	st	Z, r24
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <DIO_u8SetPortValue+0x76>
			case portD: PORTD=Copy_u8GeneralValue;break;
    13fa:	e2 e3       	ldi	r30, 0x32	; 50
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	80 83       	st	Z, r24
		}
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <DIO_u8GetPortValue>:

/*Read any port value*/
u8 DIO_u8GetPortValue(enum_port Copy_enuPort, u8 *pu8Value){
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <DIO_u8GetPortValue+0x6>
    1418:	00 d0       	rcall	.+0      	; 0x141a <DIO_u8GetPortValue+0x8>
    141a:	00 d0       	rcall	.+0      	; 0x141c <DIO_u8GetPortValue+0xa>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	7b 83       	std	Y+3, r23	; 0x03
    1424:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_enuPort){
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3d 83       	std	Y+5, r19	; 0x05
    142e:	2c 83       	std	Y+4, r18	; 0x04
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	91 05       	cpc	r25, r1
    1438:	e1 f0       	breq	.+56     	; 0x1472 <DIO_u8GetPortValue+0x60>
    143a:	2c 81       	ldd	r18, Y+4	; 0x04
    143c:	3d 81       	ldd	r19, Y+5	; 0x05
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	2c f4       	brge	.+10     	; 0x144e <DIO_u8GetPortValue+0x3c>
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	9d 81       	ldd	r25, Y+5	; 0x05
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	61 f0       	breq	.+24     	; 0x1464 <DIO_u8GetPortValue+0x52>
    144c:	26 c0       	rjmp	.+76     	; 0x149a <DIO_u8GetPortValue+0x88>
    144e:	2c 81       	ldd	r18, Y+4	; 0x04
    1450:	3d 81       	ldd	r19, Y+5	; 0x05
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	a1 f0       	breq	.+40     	; 0x1480 <DIO_u8GetPortValue+0x6e>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	83 30       	cpi	r24, 0x03	; 3
    145e:	91 05       	cpc	r25, r1
    1460:	b1 f0       	breq	.+44     	; 0x148e <DIO_u8GetPortValue+0x7c>
    1462:	1b c0       	rjmp	.+54     	; 0x149a <DIO_u8GetPortValue+0x88>
	case portA: *pu8Value=PINA;break;
    1464:	e9 e3       	ldi	r30, 0x39	; 57
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	ea 81       	ldd	r30, Y+2	; 0x02
    146c:	fb 81       	ldd	r31, Y+3	; 0x03
    146e:	80 83       	st	Z, r24
    1470:	14 c0       	rjmp	.+40     	; 0x149a <DIO_u8GetPortValue+0x88>
	case portB: *pu8Value=PINB;break;
    1472:	e6 e3       	ldi	r30, 0x36	; 54
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	ea 81       	ldd	r30, Y+2	; 0x02
    147a:	fb 81       	ldd	r31, Y+3	; 0x03
    147c:	80 83       	st	Z, r24
    147e:	0d c0       	rjmp	.+26     	; 0x149a <DIO_u8GetPortValue+0x88>
	case portC: *pu8Value=PINC;break;
    1480:	e3 e3       	ldi	r30, 0x33	; 51
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	ea 81       	ldd	r30, Y+2	; 0x02
    1488:	fb 81       	ldd	r31, Y+3	; 0x03
    148a:	80 83       	st	Z, r24
    148c:	06 c0       	rjmp	.+12     	; 0x149a <DIO_u8GetPortValue+0x88>
	case portD: *pu8Value=PIND;break;
    148e:	e0 e3       	ldi	r30, 0x30	; 48
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	ea 81       	ldd	r30, Y+2	; 0x02
    1496:	fb 81       	ldd	r31, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
	}
}
    149a:	26 96       	adiw	r28, 0x06	; 6
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <SVNSEG_vdDispData>:
#include"../../lib/BIT_MATH.h"
#include"../../MCAL/DIO/DIO_interface.h"
#include"SvnSeg_interface.h"
#include"SvnSeg_config.h"

void SVNSEG_vdDispData(enum_data Copy_enumdataDATA){
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <SVNSEG_vdDispData+0x6>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DispData= Copy_enumdataDATA^SVNSEG_IS_COMMON_ANODE;
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(SVNSEG_DATAPORT,Local_u8DispData);
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	69 81       	ldd	r22, Y+1	; 0x01
    14c0:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_u8SetPortValue>
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <LCD_u8ConvertPos>:
#ifndef LCD_PRIVATE_H
#define LCD_PRIVATE_H
/***************************************************/
/*LCD Private convert position argument to LCD command*/
u8 LCD_u8ConvertPos(u8 Copy_u8Row,u8 Copy_u8Col){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <LCD_u8ConvertPos+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <LCD_u8ConvertPos+0x8>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	6b 83       	std	Y+3, r22	; 0x03
	/*Holds location as hex command*/
	u8 Local_u8Result=0;
    14e0:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Row){
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3d 83       	std	Y+5, r19	; 0x05
    14ea:	2c 83       	std	Y+4, r18	; 0x04
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	9d 81       	ldd	r25, Y+5	; 0x05
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	31 f0       	breq	.+12     	; 0x1500 <LCD_u8ConvertPos+0x32>
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	21 30       	cpi	r18, 0x01	; 1
    14fa:	31 05       	cpc	r19, r1
    14fc:	a9 f0       	breq	.+42     	; 0x1528 <LCD_u8ConvertPos+0x5a>
    14fe:	28 c0       	rjmp	.+80     	; 0x1550 <LCD_u8ConvertPos+0x82>
	case 0:/*If First LCD row*/
		if(Copy_u8Col<16){/*If Column is in the first 16 characters in DDRAM*/
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	80 31       	cpi	r24, 0x10	; 16
    1504:	18 f4       	brcc	.+6      	; 0x150c <LCD_u8ConvertPos+0x3e>
			Local_u8Result=Copy_u8Col;
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	22 c0       	rjmp	.+68     	; 0x1550 <LCD_u8ConvertPos+0x82>
		}else if (Copy_u8Col<32){/*If Column is in the 2nd 16 character in the DDRAM*/
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	80 32       	cpi	r24, 0x20	; 32
    1510:	20 f4       	brcc	.+8      	; 0x151a <LCD_u8ConvertPos+0x4c>
			Local_u8Result=0x10|Copy_u8Col;
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	80 61       	ori	r24, 0x10	; 16
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	1b c0       	rjmp	.+54     	; 0x1550 <LCD_u8ConvertPos+0x82>
		}else if (Copy_u8Col<40){/*IF Column is in the Last 8 characters in the DDRAM*/
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 32       	cpi	r24, 0x28	; 40
    151e:	c0 f4       	brcc	.+48     	; 0x1550 <LCD_u8ConvertPos+0x82>
			Local_u8Result=0x20|Copy_u8Col;
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	80 62       	ori	r24, 0x20	; 32
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <LCD_u8ConvertPos+0x82>
		}
		break;
	case 1:/*If Second LCD row*/
		if(Copy_u8Col<16){/*If Column is in the first 16 characters in DDRAM*/
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	80 31       	cpi	r24, 0x10	; 16
    152c:	20 f4       	brcc	.+8      	; 0x1536 <LCD_u8ConvertPos+0x68>
			Local_u8Result=0x40|Copy_u8Col;
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	80 64       	ori	r24, 0x40	; 64
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	0d c0       	rjmp	.+26     	; 0x1550 <LCD_u8ConvertPos+0x82>

		}else if (Copy_u8Col<32){/*If Column is in the 2nd 16 character in the DDRAM*/
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	80 32       	cpi	r24, 0x20	; 32
    153a:	20 f4       	brcc	.+8      	; 0x1544 <LCD_u8ConvertPos+0x76>
			Local_u8Result=0x50|Copy_u8Col;
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	80 65       	ori	r24, 0x50	; 80
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <LCD_u8ConvertPos+0x82>

		}else if (Copy_u8Col<40){/*IF Column is in the Last 8 characters in the DDRAM*/
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	88 32       	cpi	r24, 0x28	; 40
    1548:	18 f4       	brcc	.+6      	; 0x1550 <LCD_u8ConvertPos+0x82>
			Local_u8Result=0x60|Copy_u8Col;
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	80 66       	ori	r24, 0x60	; 96
    154e:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	/*Return Zero if position is invalid */
	return Local_u8Result;
    1550:	89 81       	ldd	r24, Y+1	; 0x01
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <LCD_vdSendData>:
#include<util/delay.h>
#include "LCD_private.h"

/****************************************************/
/*Data*/
void LCD_vdSendData(u8 Copy_u8Data){
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	2f 97       	sbiw	r28, 0x0f	; 15
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	8f 87       	std	Y+15, r24	; 0x0f
		/*set RS as High*/
		DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_RS_PIN,pinHigh);
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	62 e0       	ldi	r22, 0x02	; 2
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
		/*set RW as low*/
		DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_RW_PIN,pinLow);
    1582:	83 e0       	ldi	r24, 0x03	; 3
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
		/*Send data*/
		DIO_u8SetPortValue(LCD_DATAPORT,Copy_u8Data);
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1590:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_u8SetPortValue>
		/*Set Enable as high*/
		DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_E_PIN,pinHigh);
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a0 e0       	ldi	r26, 0x00	; 0
    15a4:	b0 e4       	ldi	r27, 0x40	; 64
    15a6:	8b 87       	std	Y+11, r24	; 0x0b
    15a8:	9c 87       	std	Y+12, r25	; 0x0c
    15aa:	ad 87       	std	Y+13, r26	; 0x0d
    15ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4a ef       	ldi	r20, 0xFA	; 250
    15bc:	54 e4       	ldi	r21, 0x44	; 68
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	8f 83       	std	Y+7, r24	; 0x07
    15c8:	98 87       	std	Y+8, r25	; 0x08
    15ca:	a9 87       	std	Y+9, r26	; 0x09
    15cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ce:	6f 81       	ldd	r22, Y+7	; 0x07
    15d0:	78 85       	ldd	r23, Y+8	; 0x08
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	5f e3       	ldi	r21, 0x3F	; 63
    15de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15e2:	88 23       	and	r24, r24
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <LCD_vdSendData+0x8e>
		__ticks = 1;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	3f c0       	rjmp	.+126    	; 0x166e <LCD_vdSendData+0x10c>
	else if (__tmp > 65535)
    15f0:	6f 81       	ldd	r22, Y+7	; 0x07
    15f2:	78 85       	ldd	r23, Y+8	; 0x08
    15f4:	89 85       	ldd	r24, Y+9	; 0x09
    15f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	57 e4       	ldi	r21, 0x47	; 71
    1600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	4c f5       	brge	.+82     	; 0x165a <LCD_vdSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e2       	ldi	r20, 0x20	; 32
    1616:	51 e4       	ldi	r21, 0x41	; 65
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <LCD_vdSendData+0xee>
    1632:	88 ec       	ldi	r24, 0xC8	; 200
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <LCD_vdSendData+0xdc>
    1642:	9c 83       	std	Y+4, r25	; 0x04
    1644:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	69 f7       	brne	.-38     	; 0x1632 <LCD_vdSendData+0xd0>
    1658:	14 c0       	rjmp	.+40     	; 0x1682 <LCD_vdSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165a:	6f 81       	ldd	r22, Y+7	; 0x07
    165c:	78 85       	ldd	r23, Y+8	; 0x08
    165e:	89 85       	ldd	r24, Y+9	; 0x09
    1660:	9a 85       	ldd	r25, Y+10	; 0x0a
    1662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <LCD_vdSendData+0x118>
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
		/*Delay 2 ms*/
		_delay_ms(2);
		/*Set Enable as Low*/
		DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_E_PIN,pinLow);
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>

}
    168c:	2f 96       	adiw	r28, 0x0f	; 15
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <LCD_vdSendCommand>:
/****************************************************/
		/*command*/
void LCD_vdSendCommand(u8 Copy_u8Command){
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	2f 97       	sbiw	r28, 0x0f	; 15
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS as Low*/
	DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_RS_PIN,pinLow);
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	/*Set RW ad Low*/
	DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_RW_PIN,pinLow);
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	/*Send command*/
	DIO_u8SetPortValue(LCD_DATAPORT,Copy_u8Command);
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    16cc:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_u8SetPortValue>
	/*Set Enable as High*/
	DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_E_PIN,pinHigh);
    16d0:	83 e0       	ldi	r24, 0x03	; 3
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	b0 e4       	ldi	r27, 0x40	; 64
    16e2:	8b 87       	std	Y+11, r24	; 0x0b
    16e4:	9c 87       	std	Y+12, r25	; 0x0c
    16e6:	ad 87       	std	Y+13, r26	; 0x0d
    16e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8f 83       	std	Y+7, r24	; 0x07
    1704:	98 87       	std	Y+8, r25	; 0x08
    1706:	a9 87       	std	Y+9, r26	; 0x09
    1708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <LCD_vdSendCommand+0x8e>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <LCD_vdSendCommand+0x10c>
	else if (__tmp > 65535)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <LCD_vdSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6b 85       	ldd	r22, Y+11	; 0x0b
    1746:	7c 85       	ldd	r23, Y+12	; 0x0c
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
    176c:	0f c0       	rjmp	.+30     	; 0x178c <LCD_vdSendCommand+0xee>
    176e:	88 ec       	ldi	r24, 0xC8	; 200
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_vdSendCommand+0xdc>
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <LCD_vdSendCommand+0xd0>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <LCD_vdSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_vdSendCommand+0x118>
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
	/*delay 2ms*/
	_delay_ms(2);
	/*Set Enable as Low*/
	DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_E_PIN,pinLow);
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>

}
    17c8:	2f 96       	adiw	r28, 0x0f	; 15
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <LCD_vdInit>:
/****************************************************/
		/*Initialization*/
void LCD_vdInit(void){
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	aa 97       	sbiw	r28, 0x2a	; 42
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e2       	ldi	r26, 0x20	; 32
    17f4:	b2 e4       	ldi	r27, 0x42	; 66
    17f6:	8f a3       	std	Y+39, r24	; 0x27
    17f8:	98 a7       	std	Y+40, r25	; 0x28
    17fa:	a9 a7       	std	Y+41, r26	; 0x29
    17fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1800:	78 a5       	ldd	r23, Y+40	; 0x28
    1802:	89 a5       	ldd	r24, Y+41	; 0x29
    1804:	9a a5       	ldd	r25, Y+42	; 0x2a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4a ef       	ldi	r20, 0xFA	; 250
    180c:	54 e4       	ldi	r21, 0x44	; 68
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	8b a3       	std	Y+35, r24	; 0x23
    1818:	9c a3       	std	Y+36, r25	; 0x24
    181a:	ad a3       	std	Y+37, r26	; 0x25
    181c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    181e:	6b a1       	ldd	r22, Y+35	; 0x23
    1820:	7c a1       	ldd	r23, Y+36	; 0x24
    1822:	8d a1       	ldd	r24, Y+37	; 0x25
    1824:	9e a1       	ldd	r25, Y+38	; 0x26
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1832:	88 23       	and	r24, r24
    1834:	2c f4       	brge	.+10     	; 0x1840 <LCD_vdInit+0x66>
		__ticks = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9a a3       	std	Y+34, r25	; 0x22
    183c:	89 a3       	std	Y+33, r24	; 0x21
    183e:	3f c0       	rjmp	.+126    	; 0x18be <LCD_vdInit+0xe4>
	else if (__tmp > 65535)
    1840:	6b a1       	ldd	r22, Y+35	; 0x23
    1842:	7c a1       	ldd	r23, Y+36	; 0x24
    1844:	8d a1       	ldd	r24, Y+37	; 0x25
    1846:	9e a1       	ldd	r25, Y+38	; 0x26
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	3f ef       	ldi	r19, 0xFF	; 255
    184c:	4f e7       	ldi	r20, 0x7F	; 127
    184e:	57 e4       	ldi	r21, 0x47	; 71
    1850:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1854:	18 16       	cp	r1, r24
    1856:	4c f5       	brge	.+82     	; 0x18aa <LCD_vdInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1858:	6f a1       	ldd	r22, Y+39	; 0x27
    185a:	78 a5       	ldd	r23, Y+40	; 0x28
    185c:	89 a5       	ldd	r24, Y+41	; 0x29
    185e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9a a3       	std	Y+34, r25	; 0x22
    187e:	89 a3       	std	Y+33, r24	; 0x21
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <LCD_vdInit+0xc6>
    1882:	88 ec       	ldi	r24, 0xC8	; 200
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	98 a3       	std	Y+32, r25	; 0x20
    1888:	8f 8f       	std	Y+31, r24	; 0x1f
    188a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    188c:	98 a1       	ldd	r25, Y+32	; 0x20
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <LCD_vdInit+0xb4>
    1892:	98 a3       	std	Y+32, r25	; 0x20
    1894:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1896:	89 a1       	ldd	r24, Y+33	; 0x21
    1898:	9a a1       	ldd	r25, Y+34	; 0x22
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9a a3       	std	Y+34, r25	; 0x22
    189e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a0:	89 a1       	ldd	r24, Y+33	; 0x21
    18a2:	9a a1       	ldd	r25, Y+34	; 0x22
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	69 f7       	brne	.-38     	; 0x1882 <LCD_vdInit+0xa8>
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <LCD_vdInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	6b a1       	ldd	r22, Y+35	; 0x23
    18ac:	7c a1       	ldd	r23, Y+36	; 0x24
    18ae:	8d a1       	ldd	r24, Y+37	; 0x25
    18b0:	9e a1       	ldd	r25, Y+38	; 0x26
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9a a3       	std	Y+34, r25	; 0x22
    18bc:	89 a3       	std	Y+33, r24	; 0x21
    18be:	89 a1       	ldd	r24, Y+33	; 0x21
    18c0:	9a a1       	ldd	r25, Y+34	; 0x22
    18c2:	9e 8f       	std	Y+30, r25	; 0x1e
    18c4:	8d 8f       	std	Y+29, r24	; 0x1d
    18c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_vdInit+0xf0>
    18ce:	9e 8f       	std	Y+30, r25	; 0x1e
    18d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(40);
	LCD_vdSendCommand(0b00111100);
    18d2:	8c e3       	ldi	r24, 0x3C	; 60
    18d4:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 e8       	ldi	r26, 0x80	; 128
    18de:	bf e3       	ldi	r27, 0x3F	; 63
    18e0:	89 8f       	std	Y+25, r24	; 0x19
    18e2:	9a 8f       	std	Y+26, r25	; 0x1a
    18e4:	ab 8f       	std	Y+27, r26	; 0x1b
    18e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a ef       	ldi	r20, 0xFA	; 250
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	8d 8b       	std	Y+21, r24	; 0x15
    1902:	9e 8b       	std	Y+22, r25	; 0x16
    1904:	af 8b       	std	Y+23, r26	; 0x17
    1906:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1908:	6d 89       	ldd	r22, Y+21	; 0x15
    190a:	7e 89       	ldd	r23, Y+22	; 0x16
    190c:	8f 89       	ldd	r24, Y+23	; 0x17
    190e:	98 8d       	ldd	r25, Y+24	; 0x18
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	2c f4       	brge	.+10     	; 0x192a <LCD_vdInit+0x150>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
    1928:	3f c0       	rjmp	.+126    	; 0x19a8 <LCD_vdInit+0x1ce>
	else if (__tmp > 65535)
    192a:	6d 89       	ldd	r22, Y+21	; 0x15
    192c:	7e 89       	ldd	r23, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	4c f5       	brge	.+82     	; 0x1994 <LCD_vdInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	69 8d       	ldd	r22, Y+25	; 0x19
    1944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	0f c0       	rjmp	.+30     	; 0x198a <LCD_vdInit+0x1b0>
    196c:	88 ec       	ldi	r24, 0xC8	; 200
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9a 8b       	std	Y+18, r25	; 0x12
    1972:	89 8b       	std	Y+17, r24	; 0x11
    1974:	89 89       	ldd	r24, Y+17	; 0x11
    1976:	9a 89       	ldd	r25, Y+18	; 0x12
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <LCD_vdInit+0x19e>
    197c:	9a 8b       	std	Y+18, r25	; 0x12
    197e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1980:	8b 89       	ldd	r24, Y+19	; 0x13
    1982:	9c 89       	ldd	r25, Y+20	; 0x14
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198a:	8b 89       	ldd	r24, Y+19	; 0x13
    198c:	9c 89       	ldd	r25, Y+20	; 0x14
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	69 f7       	brne	.-38     	; 0x196c <LCD_vdInit+0x192>
    1992:	14 c0       	rjmp	.+40     	; 0x19bc <LCD_vdInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1994:	6d 89       	ldd	r22, Y+21	; 0x15
    1996:	7e 89       	ldd	r23, Y+22	; 0x16
    1998:	8f 89       	ldd	r24, Y+23	; 0x17
    199a:	98 8d       	ldd	r25, Y+24	; 0x18
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9c 8b       	std	Y+20, r25	; 0x14
    19a6:	8b 8b       	std	Y+19, r24	; 0x13
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	98 8b       	std	Y+16, r25	; 0x10
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
    19b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b2:	98 89       	ldd	r25, Y+16	; 0x10
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <LCD_vdInit+0x1da>
    19b8:	98 8b       	std	Y+16, r25	; 0x10
    19ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_vdSendCommand(0b0001100);
    19bc:	8c e0       	ldi	r24, 0x0C	; 12
    19be:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a0 e8       	ldi	r26, 0x80	; 128
    19c8:	bf e3       	ldi	r27, 0x3F	; 63
    19ca:	8b 87       	std	Y+11, r24	; 0x0b
    19cc:	9c 87       	std	Y+12, r25	; 0x0c
    19ce:	ad 87       	std	Y+13, r26	; 0x0d
    19d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a ef       	ldi	r20, 0xFA	; 250
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8f 83       	std	Y+7, r24	; 0x07
    19ec:	98 87       	std	Y+8, r25	; 0x08
    19ee:	a9 87       	std	Y+9, r26	; 0x09
    19f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f2:	6f 81       	ldd	r22, Y+7	; 0x07
    19f4:	78 85       	ldd	r23, Y+8	; 0x08
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <LCD_vdInit+0x23a>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	3f c0       	rjmp	.+126    	; 0x1a92 <LCD_vdInit+0x2b8>
	else if (__tmp > 65535)
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f e7       	ldi	r20, 0x7F	; 127
    1a22:	57 e4       	ldi	r21, 0x47	; 71
    1a24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	4c f5       	brge	.+82     	; 0x1a7e <LCD_vdInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	8d 83       	std	Y+5, r24	; 0x05
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <LCD_vdInit+0x29a>
    1a56:	88 ec       	ldi	r24, 0xC8	; 200
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 83       	std	Y+4, r25	; 0x04
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_vdInit+0x288>
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	8d 81       	ldd	r24, Y+5	; 0x05
    1a76:	9e 81       	ldd	r25, Y+6	; 0x06
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <LCD_vdInit+0x27c>
    1a7c:	14 c0       	rjmp	.+40     	; 0x1aa6 <LCD_vdInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	78 85       	ldd	r23, Y+8	; 0x08
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_vdInit+0x2c4>
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_vdSendCommand(0b00000001);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
}
    1aac:	aa 96       	adiw	r28, 0x2a	; 42
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <LCD_vdSendString>:
/*****************************************************/
		/*Send string*/
void LCD_vdSendString(u8 *pu8String){
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <LCD_vdSendString+0x6>
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	9b 83       	std	Y+3, r25	; 0x03
    1acc:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0; pu8String[i]!='\0';i++){
    1ace:	19 82       	std	Y+1, r1	; 0x01
    1ad0:	0e c0       	rjmp	.+28     	; 0x1aee <LCD_vdSendString+0x30>
	/******Print each character until reaching \0*****/
		LCD_vdSendData(pu8String[i]);
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	fc 01       	movw	r30, r24
    1ade:	e2 0f       	add	r30, r18
    1ae0:	f3 1f       	adc	r31, r19
    1ae2:	80 81       	ld	r24, Z
    1ae4:	0e 94 b1 0a 	call	0x1562	; 0x1562 <LCD_vdSendData>
	LCD_vdSendCommand(0b00000001);
}
/*****************************************************/
		/*Send string*/
void LCD_vdSendString(u8 *pu8String){
	for(u8 i=0; pu8String[i]!='\0';i++){
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	8f 5f       	subi	r24, 0xFF	; 255
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	fc 01       	movw	r30, r24
    1afa:	e2 0f       	add	r30, r18
    1afc:	f3 1f       	adc	r31, r19
    1afe:	80 81       	ld	r24, Z
    1b00:	88 23       	and	r24, r24
    1b02:	39 f7       	brne	.-50     	; 0x1ad2 <LCD_vdSendString+0x14>
	/******Print each character until reaching \0*****/
		LCD_vdSendData(pu8String[i]);
	}
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <LCD_vdSendDataToPos>:
/****************************************************/
		/*Send Data to specific location*/
void LCD_vdSendDataToPos(u8 Copy_u8Row,u8 Copy_u8Col, u8 Copy_u8Data){
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <LCD_vdSendDataToPos+0x6>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <LCD_vdSendDataToPos+0x8>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	6b 83       	std	Y+3, r22	; 0x03
    1b20:	4c 83       	std	Y+4, r20	; 0x04
	/*Convert Row column to position Command*/
	u8 Local_u8Pos= LCD_u8ConvertPos(Copy_u8Row,Copy_u8Col);
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	6b 81       	ldd	r22, Y+3	; 0x03
    1b26:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_u8ConvertPos>
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	/*To Set D7 as High(busy flag)*/
	Local_u8Pos|=0x80;
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	80 68       	ori	r24, 0x80	; 128
    1b30:	89 83       	std	Y+1, r24	; 0x01
	/*Move cursor to desired position*/
	LCD_vdSendCommand(Local_u8Pos);
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
	/*Print Data on LCD*/
	LCD_vdSendData(Copy_u8Data);
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <LCD_vdSendData>
}
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <LCD_vdSendStringToPos>:
/****************************************************/
		/*Send string to location*/
void LCD_vdSendStringToPos(u8 Copy_u8Row,u8 Copy_u8Col, u8 *pu8String){
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <LCD_vdSendStringToPos+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <LCD_vdSendStringToPos+0x8>
    1b54:	0f 92       	push	r0
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	6b 83       	std	Y+3, r22	; 0x03
    1b5e:	5d 83       	std	Y+5, r21	; 0x05
    1b60:	4c 83       	std	Y+4, r20	; 0x04
	/*Convert Row column to position Command*/
	u8 Local_u8Pos= LCD_u8ConvertPos(Copy_u8Row,Copy_u8Col);
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	6b 81       	ldd	r22, Y+3	; 0x03
    1b66:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_u8ConvertPos>
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	/*To Set D7 as High(busy flag)*/
	Local_u8Pos|=0x80;
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	80 68       	ori	r24, 0x80	; 128
    1b70:	89 83       	std	Y+1, r24	; 0x01
	/*Move cursor to desired position*/
	LCD_vdSendCommand(Local_u8Pos);
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
	/*Print String on LCD*/
	LCD_vdSendString(pu8String);
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <LCD_vdSendString>
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <LCD_vdDelData>:
/****************************************************/
		/*Delete Data*/
void LCD_vdDelData(void){
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62

}
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <KPAD_u8GetPressedKey>:
#include"../../lib/BIT_MATH.h"
#include"../../MCAL/DIO/DIO_interface.h"
#include"KPAD_config.h"


u8 KPAD_u8GetPressedKey(void){
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	a1 97       	sbiw	r28, 0x21	; 33
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
	u8 Local_PressedKey= KEY_NOT_PRESSED;
    1bb2:	8a e0       	ldi	r24, 0x0A	; 10
    1bb4:	8b 83       	std	Y+3, r24	; 0x03

	u8 KPAD_u8State=1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	8c 83       	std	Y+4, r24	; 0x04
	u8 KPAD_u8ColumnArray[]= {KPAD_C0_PIN, KPAD_C1_PIN, KPAD_C2_PIN, KPAD_C3_PIN};
    1bba:	84 e0       	ldi	r24, 0x04	; 4
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	85 e0       	ldi	r24, 0x05	; 5
    1bc0:	8e 83       	std	Y+6, r24	; 0x06
    1bc2:	86 e0       	ldi	r24, 0x06	; 6
    1bc4:	8f 83       	std	Y+7, r24	; 0x07
    1bc6:	87 e0       	ldi	r24, 0x07	; 7
    1bc8:	88 87       	std	Y+8, r24	; 0x08
	u8 KPAD_u8RowArray[]= {KPAD_R0_PIN, KPAD_R1_PIN, KPAD_R2_PIN, KPAD_R3_PIN};
    1bca:	19 86       	std	Y+9, r1	; 0x09
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	8a 87       	std	Y+10, r24	; 0x0a
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	8b 87       	std	Y+11, r24	; 0x0b
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	8c 87       	std	Y+12, r24	; 0x0c
	u8 user_array [4][4]= USER_NUMBERS;
    1bd8:	ce 01       	movw	r24, r28
    1bda:	0d 96       	adiw	r24, 0x0d	; 13
    1bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bde:	8d 8f       	std	Y+29, r24	; 0x1d
    1be0:	ee e6       	ldi	r30, 0x6E	; 110
    1be2:	f1 e0       	ldi	r31, 0x01	; 1
    1be4:	f8 a3       	std	Y+32, r31	; 0x20
    1be6:	ef 8f       	std	Y+31, r30	; 0x1f
    1be8:	f0 e1       	ldi	r31, 0x10	; 16
    1bea:	f9 a3       	std	Y+33, r31	; 0x21
    1bec:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1bee:	f8 a1       	ldd	r31, Y+32	; 0x20
    1bf0:	00 80       	ld	r0, Z
    1bf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf4:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	98 a3       	std	Y+32, r25	; 0x20
    1bfa:	8f 8f       	std	Y+31, r24	; 0x1f
    1bfc:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1bfe:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1c00:	00 82       	st	Z, r0
    1c02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	9e 8f       	std	Y+30, r25	; 0x1e
    1c0a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c0c:	99 a1       	ldd	r25, Y+33	; 0x21
    1c0e:	91 50       	subi	r25, 0x01	; 1
    1c10:	99 a3       	std	Y+33, r25	; 0x21
    1c12:	e9 a1       	ldd	r30, Y+33	; 0x21
    1c14:	ee 23       	and	r30, r30
    1c16:	51 f7       	brne	.-44     	; 0x1bec <KPAD_u8GetPressedKey+0x4e>

	for (u8 col=0; col<4; col++){
    1c18:	1a 82       	std	Y+2, r1	; 0x02
    1c1a:	69 c0       	rjmp	.+210    	; 0x1cee <KPAD_u8GetPressedKey+0x150>
		DIO_u8SetPinValue(KPAD_PORT,KPAD_u8ColumnArray[col],pinLow);
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	ce 01       	movw	r24, r28
    1c24:	05 96       	adiw	r24, 0x05	; 5
    1c26:	fc 01       	movw	r30, r24
    1c28:	e2 0f       	add	r30, r18
    1c2a:	f3 1f       	adc	r31, r19
    1c2c:	90 81       	ld	r25, Z
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	69 2f       	mov	r22, r25
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>

		for(u8 row=0; row<4; row++){
    1c38:	19 82       	std	Y+1, r1	; 0x01
    1c3a:	41 c0       	rjmp	.+130    	; 0x1cbe <KPAD_u8GetPressedKey+0x120>
			DIO_u8GetPinValue(KPAD_PORT,KPAD_u8RowArray[row],&KPAD_u8State);
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	ce 01       	movw	r24, r28
    1c44:	09 96       	adiw	r24, 0x09	; 9
    1c46:	fc 01       	movw	r30, r24
    1c48:	e2 0f       	add	r30, r18
    1c4a:	f3 1f       	adc	r31, r19
    1c4c:	90 81       	ld	r25, Z
    1c4e:	9e 01       	movw	r18, r28
    1c50:	2c 5f       	subi	r18, 0xFC	; 252
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	69 2f       	mov	r22, r25
    1c58:	a9 01       	movw	r20, r18
    1c5a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_u8GetPinValue>
			if(!KPAD_u8State){
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	88 23       	and	r24, r24
    1c62:	51 f5       	brne	.+84     	; 0x1cb8 <KPAD_u8GetPressedKey+0x11a>
				Local_PressedKey=user_array[col][row];
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	22 0f       	add	r18, r18
    1c72:	33 1f       	adc	r19, r19
    1c74:	22 0f       	add	r18, r18
    1c76:	33 1f       	adc	r19, r19
    1c78:	ce 01       	movw	r24, r28
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	82 0f       	add	r24, r18
    1c7e:	93 1f       	adc	r25, r19
    1c80:	84 0f       	add	r24, r20
    1c82:	95 1f       	adc	r25, r21
    1c84:	fc 01       	movw	r30, r24
    1c86:	3c 96       	adiw	r30, 0x0c	; 12
    1c88:	80 81       	ld	r24, Z
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	11 c0       	rjmp	.+34     	; 0x1cb0 <KPAD_u8GetPressedKey+0x112>
				while(!KPAD_u8State){
					DIO_u8GetPinValue(KPAD_PORT,KPAD_u8RowArray[row],&KPAD_u8State);
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	ce 01       	movw	r24, r28
    1c96:	09 96       	adiw	r24, 0x09	; 9
    1c98:	fc 01       	movw	r30, r24
    1c9a:	e2 0f       	add	r30, r18
    1c9c:	f3 1f       	adc	r31, r19
    1c9e:	90 81       	ld	r25, Z
    1ca0:	9e 01       	movw	r18, r28
    1ca2:	2c 5f       	subi	r18, 0xFC	; 252
    1ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	69 2f       	mov	r22, r25
    1caa:	a9 01       	movw	r20, r18
    1cac:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_u8GetPinValue>

		for(u8 row=0; row<4; row++){
			DIO_u8GetPinValue(KPAD_PORT,KPAD_u8RowArray[row],&KPAD_u8State);
			if(!KPAD_u8State){
				Local_PressedKey=user_array[col][row];
				while(!KPAD_u8State){
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	88 23       	and	r24, r24
    1cb4:	61 f3       	breq	.-40     	; 0x1c8e <KPAD_u8GetPressedKey+0xf0>
    1cb6:	07 c0       	rjmp	.+14     	; 0x1cc6 <KPAD_u8GetPressedKey+0x128>
	u8 user_array [4][4]= USER_NUMBERS;

	for (u8 col=0; col<4; col++){
		DIO_u8SetPinValue(KPAD_PORT,KPAD_u8ColumnArray[col],pinLow);

		for(u8 row=0; row<4; row++){
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	8f 5f       	subi	r24, 0xFF	; 255
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	84 30       	cpi	r24, 0x04	; 4
    1cc2:	08 f4       	brcc	.+2      	; 0x1cc6 <KPAD_u8GetPressedKey+0x128>
    1cc4:	bb cf       	rjmp	.-138    	; 0x1c3c <KPAD_u8GetPressedKey+0x9e>
					DIO_u8GetPinValue(KPAD_PORT,KPAD_u8RowArray[row],&KPAD_u8State);
				}
				break;
			}
		}
		DIO_u8SetPinValue(KPAD_PORT,KPAD_u8ColumnArray[col],pinHigh);
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	ce 01       	movw	r24, r28
    1cce:	05 96       	adiw	r24, 0x05	; 5
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e2 0f       	add	r30, r18
    1cd4:	f3 1f       	adc	r31, r19
    1cd6:	90 81       	ld	r25, Z
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	69 2f       	mov	r22, r25
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
		if(Local_PressedKey!=KEY_NOT_PRESSED)break;
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	8a 30       	cpi	r24, 0x0A	; 10
    1ce6:	39 f4       	brne	.+14     	; 0x1cf6 <KPAD_u8GetPressedKey+0x158>
	u8 KPAD_u8State=1;
	u8 KPAD_u8ColumnArray[]= {KPAD_C0_PIN, KPAD_C1_PIN, KPAD_C2_PIN, KPAD_C3_PIN};
	u8 KPAD_u8RowArray[]= {KPAD_R0_PIN, KPAD_R1_PIN, KPAD_R2_PIN, KPAD_R3_PIN};
	u8 user_array [4][4]= USER_NUMBERS;

	for (u8 col=0; col<4; col++){
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	8f 5f       	subi	r24, 0xFF	; 255
    1cec:	8a 83       	std	Y+2, r24	; 0x02
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	84 30       	cpi	r24, 0x04	; 4
    1cf2:	08 f4       	brcc	.+2      	; 0x1cf6 <KPAD_u8GetPressedKey+0x158>
    1cf4:	93 cf       	rjmp	.-218    	; 0x1c1c <KPAD_u8GetPressedKey+0x7e>
		}
		DIO_u8SetPinValue(KPAD_PORT,KPAD_u8ColumnArray[col],pinHigh);
		if(Local_PressedKey!=KEY_NOT_PRESSED)break;
	}

	return Local_PressedKey;
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cf8:	a1 96       	adiw	r28, 0x21	; 33
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <H_BRIDGE_vdStop>:
#include "../../lib/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "H_BRIDGE_config.h"
#include <util/delay.h>

void H_BRIDGE_vdStop(void){
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	2e 97       	sbiw	r28, 0x0e	; 14
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_A,pinLow);
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_B,pinLow);
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	62 e0       	ldi	r22, 0x02	; 2
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_C,pinLow);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	63 e0       	ldi	r22, 0x03	; 3
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_D,pinLow);
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	64 e0       	ldi	r22, 0x04	; 4
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a8 ec       	ldi	r26, 0xC8	; 200
    1d4c:	b2 e4       	ldi	r27, 0x42	; 66
    1d4e:	8b 87       	std	Y+11, r24	; 0x0b
    1d50:	9c 87       	std	Y+12, r25	; 0x0c
    1d52:	ad 87       	std	Y+13, r26	; 0x0d
    1d54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a ef       	ldi	r20, 0xFA	; 250
    1d64:	54 e4       	ldi	r21, 0x44	; 68
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8f 83       	std	Y+7, r24	; 0x07
    1d70:	98 87       	std	Y+8, r25	; 0x08
    1d72:	a9 87       	std	Y+9, r26	; 0x09
    1d74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <H_BRIDGE_vdStop+0x8e>
		__ticks = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	3f c0       	rjmp	.+126    	; 0x1e16 <H_BRIDGE_vdStop+0x10c>
	else if (__tmp > 65535)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	4c f5       	brge	.+82     	; 0x1e02 <H_BRIDGE_vdStop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e2       	ldi	r20, 0x20	; 32
    1dbe:	51 e4       	ldi	r21, 0x41	; 65
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <H_BRIDGE_vdStop+0xee>
    1dda:	88 ec       	ldi	r24, 0xC8	; 200
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <H_BRIDGE_vdStop+0xdc>
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <H_BRIDGE_vdStop+0xd0>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <H_BRIDGE_vdStop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <H_BRIDGE_vdStop+0x118>
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STOP_DELAY_ms);
}
    1e2a:	2e 96       	adiw	r28, 0x0e	; 14
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <H_BRIDGE_vdClockWise>:
void H_BRIDGE_vdClockWise(void){
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	2e 97       	sbiw	r28, 0x0e	; 14
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_C,pinLow);
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	63 e0       	ldi	r22, 0x03	; 3
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_B,pinLow);
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	62 e0       	ldi	r22, 0x02	; 2
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a8 ec       	ldi	r26, 0xC8	; 200
    1e6a:	b2 e4       	ldi	r27, 0x42	; 66
    1e6c:	8b 87       	std	Y+11, r24	; 0x0b
    1e6e:	9c 87       	std	Y+12, r25	; 0x0c
    1e70:	ad 87       	std	Y+13, r26	; 0x0d
    1e72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a ef       	ldi	r20, 0xFA	; 250
    1e82:	54 e4       	ldi	r21, 0x44	; 68
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8f 83       	std	Y+7, r24	; 0x07
    1e8e:	98 87       	std	Y+8, r25	; 0x08
    1e90:	a9 87       	std	Y+9, r26	; 0x09
    1e92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <H_BRIDGE_vdClockWise+0x7a>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <H_BRIDGE_vdClockWise+0xf8>
	else if (__tmp > 65535)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <H_BRIDGE_vdClockWise+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <H_BRIDGE_vdClockWise+0xda>
    1ef8:	88 ec       	ldi	r24, 0xC8	; 200
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <H_BRIDGE_vdClockWise+0xc8>
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <H_BRIDGE_vdClockWise+0xbc>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <H_BRIDGE_vdClockWise+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <H_BRIDGE_vdClockWise+0x104>
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STOP_DELAY_ms);
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_A,pinHigh);
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	61 e0       	ldi	r22, 0x01	; 1
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_D,pinHigh);
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	64 e0       	ldi	r22, 0x04	; 4
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>

}
    1f5c:	2e 96       	adiw	r28, 0x0e	; 14
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <H_BRIDGE_vdAntiClockWise>:
void H_BRIDGE_vdAntiClockWise(void){
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	2e 97       	sbiw	r28, 0x0e	; 14
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_A,pinLow);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_D,pinLow);
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	64 e0       	ldi	r22, 0x04	; 4
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a8 ec       	ldi	r26, 0xC8	; 200
    1f9c:	b2 e4       	ldi	r27, 0x42	; 66
    1f9e:	8b 87       	std	Y+11, r24	; 0x0b
    1fa0:	9c 87       	std	Y+12, r25	; 0x0c
    1fa2:	ad 87       	std	Y+13, r26	; 0x0d
    1fa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a ef       	ldi	r20, 0xFA	; 250
    1fb4:	54 e4       	ldi	r21, 0x44	; 68
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8f 83       	std	Y+7, r24	; 0x07
    1fc0:	98 87       	std	Y+8, r25	; 0x08
    1fc2:	a9 87       	std	Y+9, r26	; 0x09
    1fc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc8:	78 85       	ldd	r23, Y+8	; 0x08
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <H_BRIDGE_vdAntiClockWise+0x7a>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <H_BRIDGE_vdAntiClockWise+0xf8>
	else if (__tmp > 65535)
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <H_BRIDGE_vdAntiClockWise+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <H_BRIDGE_vdAntiClockWise+0xda>
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	8b 83       	std	Y+3, r24	; 0x03
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <H_BRIDGE_vdAntiClockWise+0xc8>
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <H_BRIDGE_vdAntiClockWise+0xbc>
    2050:	14 c0       	rjmp	.+40     	; 0x207a <H_BRIDGE_vdAntiClockWise+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <H_BRIDGE_vdAntiClockWise+0x104>
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STOP_DELAY_ms);
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_C,pinHigh);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	63 e0       	ldi	r22, 0x03	; 3
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_B,pinHigh);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	62 e0       	ldi	r22, 0x02	; 2
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
}
    208e:	2e 96       	adiw	r28, 0x0e	; 14
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <Private_f32StringToFloat>:
#include"../../HAL/KPAD/KPAD_interface.h"
#include "../../HAL/LCD/LCD_interface.h"
/*************************************************************/
/*This function converts a string number to a float variable*/
/************************************************************/
f32 Private_f32StringToFloat(u8 *pu8Number) {
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	2c 97       	sbiw	r28, 0x0c	; 12
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	9c 87       	std	Y+12, r25	; 0x0c
    20b6:	8b 87       	std	Y+11, r24	; 0x0b

	f32 Local_f32Result = 0;
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e0       	ldi	r26, 0x00	; 0
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	8f 83       	std	Y+7, r24	; 0x07
    20c2:	98 87       	std	Y+8, r25	; 0x08
    20c4:	a9 87       	std	Y+9, r26	; 0x09
    20c6:	ba 87       	std	Y+10, r27	; 0x0a
	u8 Local_u8DotFlag = 0;
    20c8:	1e 82       	std	Y+6, r1	; 0x06
	f32 Local_u8DivideFactor = 10;
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e2       	ldi	r26, 0x20	; 32
    20d0:	b1 e4       	ldi	r27, 0x41	; 65
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	9b 83       	std	Y+3, r25	; 0x03
    20d6:	ac 83       	std	Y+4, r26	; 0x04
    20d8:	bd 83       	std	Y+5, r27	; 0x05

	for (u8 i = 0; pu8Number[i] != '\0'; i++) {
    20da:	19 82       	std	Y+1, r1	; 0x01
    20dc:	8a c0       	rjmp	.+276    	; 0x21f2 <Private_f32StringToFloat+0x152>
		if (pu8Number[i] == '.') {
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    20e8:	fc 01       	movw	r30, r24
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	80 81       	ld	r24, Z
    20f0:	8e 32       	cpi	r24, 0x2E	; 46
    20f2:	29 f4       	brne	.+10     	; 0x20fe <Private_f32StringToFloat+0x5e>
			Local_u8DotFlag = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	8e 83       	std	Y+6, r24	; 0x06
			i++;
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	8f 5f       	subi	r24, 0xFF	; 255
    20fc:	89 83       	std	Y+1, r24	; 0x01
		}

		if (!Local_u8DotFlag) {
    20fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2100:	88 23       	and	r24, r24
    2102:	99 f5       	brne	.+102    	; 0x216a <Private_f32StringToFloat+0xca>
			Local_f32Result *= 10;
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8f 83       	std	Y+7, r24	; 0x07
    211e:	98 87       	std	Y+8, r25	; 0x08
    2120:	a9 87       	std	Y+9, r26	; 0x09
    2122:	ba 87       	std	Y+10, r27	; 0x0a
			Local_f32Result += (pu8Number[i] - '0');
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	8b 85       	ldd	r24, Y+11	; 0x0b
    212c:	9c 85       	ldd	r25, Y+12	; 0x0c
    212e:	fc 01       	movw	r30, r24
    2130:	e2 0f       	add	r30, r18
    2132:	f3 1f       	adc	r31, r19
    2134:	80 81       	ld	r24, Z
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	c0 97       	sbiw	r24, 0x30	; 48
    213c:	aa 27       	eor	r26, r26
    213e:	97 fd       	sbrc	r25, 7
    2140:	a0 95       	com	r26
    2142:	ba 2f       	mov	r27, r26
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    214c:	9b 01       	movw	r18, r22
    214e:	ac 01       	movw	r20, r24
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8f 83       	std	Y+7, r24	; 0x07
    2162:	98 87       	std	Y+8, r25	; 0x08
    2164:	a9 87       	std	Y+9, r26	; 0x09
    2166:	ba 87       	std	Y+10, r27	; 0x0a
    2168:	41 c0       	rjmp	.+130    	; 0x21ec <Private_f32StringToFloat+0x14c>
		} else if (Local_u8DotFlag) {
    216a:	8e 81       	ldd	r24, Y+6	; 0x06
    216c:	88 23       	and	r24, r24
    216e:	f1 f1       	breq	.+124    	; 0x21ec <Private_f32StringToFloat+0x14c>
			Local_f32Result += (pu8Number[i] - '0')/Local_u8DivideFactor;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	8b 85       	ldd	r24, Y+11	; 0x0b
    2178:	9c 85       	ldd	r25, Y+12	; 0x0c
    217a:	fc 01       	movw	r30, r24
    217c:	e2 0f       	add	r30, r18
    217e:	f3 1f       	adc	r31, r19
    2180:	80 81       	ld	r24, Z
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	c0 97       	sbiw	r24, 0x30	; 48
    2188:	aa 27       	eor	r26, r26
    218a:	97 fd       	sbrc	r25, 7
    218c:	a0 95       	com	r26
    218e:	ba 2f       	mov	r27, r26
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	2a 81       	ldd	r18, Y+2	; 0x02
    21a2:	3b 81       	ldd	r19, Y+3	; 0x03
    21a4:	4c 81       	ldd	r20, Y+4	; 0x04
    21a6:	5d 81       	ldd	r21, Y+5	; 0x05
    21a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9c 01       	movw	r18, r24
    21b2:	ad 01       	movw	r20, r26
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	8f 83       	std	Y+7, r24	; 0x07
    21c6:	98 87       	std	Y+8, r25	; 0x08
    21c8:	a9 87       	std	Y+9, r26	; 0x09
    21ca:	ba 87       	std	Y+10, r27	; 0x0a
			Local_u8DivideFactor *= 10;
    21cc:	6a 81       	ldd	r22, Y+2	; 0x02
    21ce:	7b 81       	ldd	r23, Y+3	; 0x03
    21d0:	8c 81       	ldd	r24, Y+4	; 0x04
    21d2:	9d 81       	ldd	r25, Y+5	; 0x05
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e2       	ldi	r20, 0x20	; 32
    21da:	51 e4       	ldi	r21, 0x41	; 65
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	8a 83       	std	Y+2, r24	; 0x02
    21e6:	9b 83       	std	Y+3, r25	; 0x03
    21e8:	ac 83       	std	Y+4, r26	; 0x04
    21ea:	bd 83       	std	Y+5, r27	; 0x05

	f32 Local_f32Result = 0;
	u8 Local_u8DotFlag = 0;
	f32 Local_u8DivideFactor = 10;

	for (u8 i = 0; pu8Number[i] != '\0'; i++) {
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    21fc:	fc 01       	movw	r30, r24
    21fe:	e2 0f       	add	r30, r18
    2200:	f3 1f       	adc	r31, r19
    2202:	80 81       	ld	r24, Z
    2204:	88 23       	and	r24, r24
    2206:	09 f0       	breq	.+2      	; 0x220a <Private_f32StringToFloat+0x16a>
    2208:	6a cf       	rjmp	.-300    	; 0x20de <Private_f32StringToFloat+0x3e>
			Local_f32Result += (pu8Number[i] - '0')/Local_u8DivideFactor;
			Local_u8DivideFactor *= 10;
		}

	}
	return Local_f32Result;
    220a:	8f 81       	ldd	r24, Y+7	; 0x07
    220c:	98 85       	ldd	r25, Y+8	; 0x08
    220e:	a9 85       	ldd	r26, Y+9	; 0x09
    2210:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	2c 96       	adiw	r28, 0x0c	; 12
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <Private_u8WaitToPressKey>:
/*************************************************************/
/*This function waits until a button is pressed on the keypad*/
/*************************************************************/
u8 Private_u8WaitToPressKey(void) {
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8character = 0;
    2232:	19 82       	std	Y+1, r1	; 0x01
	do {
		Local_u8character = KPAD_u8GetPressedKey();
    2234:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <KPAD_u8GetPressedKey>
    2238:	89 83       	std	Y+1, r24	; 0x01
	} while (Local_u8character == 10);
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	8a 30       	cpi	r24, 0x0A	; 10
    223e:	d1 f3       	breq	.-12     	; 0x2234 <Private_u8WaitToPressKey+0xc>
	return Local_u8character;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
}
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <Private_vdFloatToString>:
/***********************************************************/
/*This function converts a float number into a string array*/
/***********************************************************/
void Private_vdFloatToString(f32 Copy_f32Value, u8 *pu8_string) {
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	60 97       	sbiw	r28, 0x10	; 16
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	6b 87       	std	Y+11, r22	; 0x0b
    2264:	7c 87       	std	Y+12, r23	; 0x0c
    2266:	8d 87       	std	Y+13, r24	; 0x0d
    2268:	9e 87       	std	Y+14, r25	; 0x0e
    226a:	58 8b       	std	Y+16, r21	; 0x10
    226c:	4f 87       	std	Y+15, r20	; 0x0f
	/*This variable is used in handling the fraction part of the float */
	s32 Local_s32Temp = Copy_f32Value;
    226e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2270:	7c 85       	ldd	r23, Y+12	; 0x0c
    2272:	8d 85       	ldd	r24, Y+13	; 0x0d
    2274:	9e 85       	ldd	r25, Y+14	; 0x0e
    2276:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8f 83       	std	Y+7, r24	; 0x07
    2280:	98 87       	std	Y+8, r25	; 0x08
    2282:	a9 87       	std	Y+9, r26	; 0x09
    2284:	ba 87       	std	Y+10, r27	; 0x0a
	u8 i = 0; //This variable is used as counter
    2286:	1e 82       	std	Y+6, r1	; 0x06
	s32 Local_s32NumLengthFactor = 10; //This is used to find the number length for the conversion
    2288:	8a e0       	ldi	r24, 0x0A	; 10
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e0       	ldi	r26, 0x00	; 0
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	8a 83       	std	Y+2, r24	; 0x02
    2292:	9b 83       	std	Y+3, r25	; 0x03
    2294:	ac 83       	std	Y+4, r26	; 0x04
    2296:	bd 83       	std	Y+5, r27	; 0x05

	/*****************************************/
	/*This condition handles the negative sign*/
	if (Local_s32Temp < 0) {
    2298:	8f 81       	ldd	r24, Y+7	; 0x07
    229a:	98 85       	ldd	r25, Y+8	; 0x08
    229c:	a9 85       	ldd	r26, Y+9	; 0x09
    229e:	ba 85       	ldd	r27, Y+10	; 0x0a
    22a0:	bb 23       	and	r27, r27
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <Private_vdFloatToString+0xac>
		pu8_string[0] = '-';
    22a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    22a6:	f8 89       	ldd	r31, Y+16	; 0x10
    22a8:	8d e2       	ldi	r24, 0x2D	; 45
    22aa:	80 83       	st	Z, r24
		i += 1;
    22ac:	8e 81       	ldd	r24, Y+6	; 0x06
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	8e 83       	std	Y+6, r24	; 0x06
		Local_s32Temp *= -1;
    22b2:	8f 81       	ldd	r24, Y+7	; 0x07
    22b4:	98 85       	ldd	r25, Y+8	; 0x08
    22b6:	a9 85       	ldd	r26, Y+9	; 0x09
    22b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    22ba:	b0 95       	com	r27
    22bc:	a0 95       	com	r26
    22be:	90 95       	com	r25
    22c0:	81 95       	neg	r24
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	af 4f       	sbci	r26, 0xFF	; 255
    22c6:	bf 4f       	sbci	r27, 0xFF	; 255
    22c8:	8f 83       	std	Y+7, r24	; 0x07
    22ca:	98 87       	std	Y+8, r25	; 0x08
    22cc:	a9 87       	std	Y+9, r26	; 0x09
    22ce:	ba 87       	std	Y+10, r27	; 0x0a
    22d0:	12 c0       	rjmp	.+36     	; 0x22f6 <Private_vdFloatToString+0xac>
	}

	/*****************************************/
	/*while loop to calculate number length*/
	while ((Local_s32Temp / Local_s32NumLengthFactor) != 0) {
		Local_s32NumLengthFactor *= 10;
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	9b 81       	ldd	r25, Y+3	; 0x03
    22d6:	ac 81       	ldd	r26, Y+4	; 0x04
    22d8:	bd 81       	ldd	r27, Y+5	; 0x05
    22da:	2a e0       	ldi	r18, 0x0A	; 10
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__mulsi3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8a 83       	std	Y+2, r24	; 0x02
    22f0:	9b 83       	std	Y+3, r25	; 0x03
    22f2:	ac 83       	std	Y+4, r26	; 0x04
    22f4:	bd 83       	std	Y+5, r27	; 0x05
		Local_s32Temp *= -1;
	}

	/*****************************************/
	/*while loop to calculate number length*/
	while ((Local_s32Temp / Local_s32NumLengthFactor) != 0) {
    22f6:	8f 81       	ldd	r24, Y+7	; 0x07
    22f8:	98 85       	ldd	r25, Y+8	; 0x08
    22fa:	a9 85       	ldd	r26, Y+9	; 0x09
    22fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    22fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2300:	3b 81       	ldd	r19, Y+3	; 0x03
    2302:	4c 81       	ldd	r20, Y+4	; 0x04
    2304:	5d 81       	ldd	r21, Y+5	; 0x05
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodsi4>
    230e:	da 01       	movw	r26, r20
    2310:	c9 01       	movw	r24, r18
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	a1 05       	cpc	r26, r1
    2316:	b1 05       	cpc	r27, r1
    2318:	e1 f6       	brne	.-72     	; 0x22d2 <Private_vdFloatToString+0x88>
		Local_s32NumLengthFactor *= 10;
	}
	Local_s32NumLengthFactor /= 10;
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	ac 81       	ldd	r26, Y+4	; 0x04
    2320:	bd 81       	ldd	r27, Y+5	; 0x05
    2322:	2a e0       	ldi	r18, 0x0A	; 10
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodsi4>
    2332:	da 01       	movw	r26, r20
    2334:	c9 01       	movw	r24, r18
    2336:	8a 83       	std	Y+2, r24	; 0x02
    2338:	9b 83       	std	Y+3, r25	; 0x03
    233a:	ac 83       	std	Y+4, r26	; 0x04
    233c:	bd 83       	std	Y+5, r27	; 0x05
    233e:	40 c0       	rjmp	.+128    	; 0x23c0 <Private_vdFloatToString+0x176>

	/*convert the integer part into a string*/
	while (Local_s32NumLengthFactor >= 1) {
		pu8_string[i] = (Local_s32Temp / Local_s32NumLengthFactor) + 48;
    2340:	8e 81       	ldd	r24, Y+6	; 0x06
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	8f 85       	ldd	r24, Y+15	; 0x0f
    2348:	98 89       	ldd	r25, Y+16	; 0x10
    234a:	8c 01       	movw	r16, r24
    234c:	02 0f       	add	r16, r18
    234e:	13 1f       	adc	r17, r19
    2350:	8f 81       	ldd	r24, Y+7	; 0x07
    2352:	98 85       	ldd	r25, Y+8	; 0x08
    2354:	a9 85       	ldd	r26, Y+9	; 0x09
    2356:	ba 85       	ldd	r27, Y+10	; 0x0a
    2358:	2a 81       	ldd	r18, Y+2	; 0x02
    235a:	3b 81       	ldd	r19, Y+3	; 0x03
    235c:	4c 81       	ldd	r20, Y+4	; 0x04
    235e:	5d 81       	ldd	r21, Y+5	; 0x05
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodsi4>
    2368:	da 01       	movw	r26, r20
    236a:	c9 01       	movw	r24, r18
    236c:	80 5d       	subi	r24, 0xD0	; 208
    236e:	f8 01       	movw	r30, r16
    2370:	80 83       	st	Z, r24
		Local_s32Temp %= Local_s32NumLengthFactor;
    2372:	8f 81       	ldd	r24, Y+7	; 0x07
    2374:	98 85       	ldd	r25, Y+8	; 0x08
    2376:	a9 85       	ldd	r26, Y+9	; 0x09
    2378:	ba 85       	ldd	r27, Y+10	; 0x0a
    237a:	2a 81       	ldd	r18, Y+2	; 0x02
    237c:	3b 81       	ldd	r19, Y+3	; 0x03
    237e:	4c 81       	ldd	r20, Y+4	; 0x04
    2380:	5d 81       	ldd	r21, Y+5	; 0x05
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodsi4>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8f 83       	std	Y+7, r24	; 0x07
    2390:	98 87       	std	Y+8, r25	; 0x08
    2392:	a9 87       	std	Y+9, r26	; 0x09
    2394:	ba 87       	std	Y+10, r27	; 0x0a
		Local_s32NumLengthFactor /= 10;
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	ac 81       	ldd	r26, Y+4	; 0x04
    239c:	bd 81       	ldd	r27, Y+5	; 0x05
    239e:	2a e0       	ldi	r18, 0x0A	; 10
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodsi4>
    23ae:	da 01       	movw	r26, r20
    23b0:	c9 01       	movw	r24, r18
    23b2:	8a 83       	std	Y+2, r24	; 0x02
    23b4:	9b 83       	std	Y+3, r25	; 0x03
    23b6:	ac 83       	std	Y+4, r26	; 0x04
    23b8:	bd 83       	std	Y+5, r27	; 0x05
		i += 1;
    23ba:	8e 81       	ldd	r24, Y+6	; 0x06
    23bc:	8f 5f       	subi	r24, 0xFF	; 255
    23be:	8e 83       	std	Y+6, r24	; 0x06
		Local_s32NumLengthFactor *= 10;
	}
	Local_s32NumLengthFactor /= 10;

	/*convert the integer part into a string*/
	while (Local_s32NumLengthFactor >= 1) {
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	9b 81       	ldd	r25, Y+3	; 0x03
    23c4:	ac 81       	ldd	r26, Y+4	; 0x04
    23c6:	bd 81       	ldd	r27, Y+5	; 0x05
    23c8:	18 16       	cp	r1, r24
    23ca:	19 06       	cpc	r1, r25
    23cc:	1a 06       	cpc	r1, r26
    23ce:	1b 06       	cpc	r1, r27
    23d0:	0c f4       	brge	.+2      	; 0x23d4 <Private_vdFloatToString+0x18a>
    23d2:	b6 cf       	rjmp	.-148    	; 0x2340 <Private_vdFloatToString+0xf6>
		Local_s32Temp %= Local_s32NumLengthFactor;
		Local_s32NumLengthFactor /= 10;
		i += 1;
	}
	/*****************************************/
	pu8_string[i] = '.';
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	8f 85       	ldd	r24, Y+15	; 0x0f
    23dc:	98 89       	ldd	r25, Y+16	; 0x10
    23de:	fc 01       	movw	r30, r24
    23e0:	e2 0f       	add	r30, r18
    23e2:	f3 1f       	adc	r31, r19
    23e4:	8e e2       	ldi	r24, 0x2E	; 46
    23e6:	80 83       	st	Z, r24
	i += 1;
    23e8:	8e 81       	ldd	r24, Y+6	; 0x06
    23ea:	8f 5f       	subi	r24, 0xFF	; 255
    23ec:	8e 83       	std	Y+6, r24	; 0x06
	/*****************************************/
	/*Handle fraction part of float(only 2 decimal places)*/
	Local_s32NumLengthFactor = 10;
    23ee:	8a e0       	ldi	r24, 0x0A	; 10
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	8a 83       	std	Y+2, r24	; 0x02
    23f8:	9b 83       	std	Y+3, r25	; 0x03
    23fa:	ac 83       	std	Y+4, r26	; 0x04
    23fc:	bd 83       	std	Y+5, r27	; 0x05
	Local_s32Temp = Copy_f32Value;
    23fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2400:	7c 85       	ldd	r23, Y+12	; 0x0c
    2402:	8d 85       	ldd	r24, Y+13	; 0x0d
    2404:	9e 85       	ldd	r25, Y+14	; 0x0e
    2406:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8f 83       	std	Y+7, r24	; 0x07
    2410:	98 87       	std	Y+8, r25	; 0x08
    2412:	a9 87       	std	Y+9, r26	; 0x09
    2414:	ba 87       	std	Y+10, r27	; 0x0a
	Local_s32Temp = (s32)((Copy_f32Value-Local_s32Temp)*100);//Get 2 decimal digits of the float
    2416:	6f 81       	ldd	r22, Y+7	; 0x07
    2418:	78 85       	ldd	r23, Y+8	; 0x08
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	9a 85       	ldd	r25, Y+10	; 0x0a
    241e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2422:	9b 01       	movw	r18, r22
    2424:	ac 01       	movw	r20, r24
    2426:	6b 85       	ldd	r22, Y+11	; 0x0b
    2428:	7c 85       	ldd	r23, Y+12	; 0x0c
    242a:	8d 85       	ldd	r24, Y+13	; 0x0d
    242c:	9e 85       	ldd	r25, Y+14	; 0x0e
    242e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	48 ec       	ldi	r20, 0xC8	; 200
    2440:	52 e4       	ldi	r21, 0x42	; 66
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8f 83       	std	Y+7, r24	; 0x07
    2458:	98 87       	std	Y+8, r25	; 0x08
    245a:	a9 87       	std	Y+9, r26	; 0x09
    245c:	ba 87       	std	Y+10, r27	; 0x0a

	/*****************************************/
	/*convert the fraction part into a string*/
	for (u8 j=0 ; j<2; j++,i++) {
    245e:	19 82       	std	Y+1, r1	; 0x01
    2460:	43 c0       	rjmp	.+134    	; 0x24e8 <Private_vdFloatToString+0x29e>
		pu8_string[i] = (Local_s32Temp / Local_s32NumLengthFactor) + 48;
    2462:	8e 81       	ldd	r24, Y+6	; 0x06
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	8f 85       	ldd	r24, Y+15	; 0x0f
    246a:	98 89       	ldd	r25, Y+16	; 0x10
    246c:	8c 01       	movw	r16, r24
    246e:	02 0f       	add	r16, r18
    2470:	13 1f       	adc	r17, r19
    2472:	8f 81       	ldd	r24, Y+7	; 0x07
    2474:	98 85       	ldd	r25, Y+8	; 0x08
    2476:	a9 85       	ldd	r26, Y+9	; 0x09
    2478:	ba 85       	ldd	r27, Y+10	; 0x0a
    247a:	2a 81       	ldd	r18, Y+2	; 0x02
    247c:	3b 81       	ldd	r19, Y+3	; 0x03
    247e:	4c 81       	ldd	r20, Y+4	; 0x04
    2480:	5d 81       	ldd	r21, Y+5	; 0x05
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodsi4>
    248a:	da 01       	movw	r26, r20
    248c:	c9 01       	movw	r24, r18
    248e:	80 5d       	subi	r24, 0xD0	; 208
    2490:	f8 01       	movw	r30, r16
    2492:	80 83       	st	Z, r24
		Local_s32Temp %= Local_s32NumLengthFactor;
    2494:	8f 81       	ldd	r24, Y+7	; 0x07
    2496:	98 85       	ldd	r25, Y+8	; 0x08
    2498:	a9 85       	ldd	r26, Y+9	; 0x09
    249a:	ba 85       	ldd	r27, Y+10	; 0x0a
    249c:	2a 81       	ldd	r18, Y+2	; 0x02
    249e:	3b 81       	ldd	r19, Y+3	; 0x03
    24a0:	4c 81       	ldd	r20, Y+4	; 0x04
    24a2:	5d 81       	ldd	r21, Y+5	; 0x05
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodsi4>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	8f 83       	std	Y+7, r24	; 0x07
    24b2:	98 87       	std	Y+8, r25	; 0x08
    24b4:	a9 87       	std	Y+9, r26	; 0x09
    24b6:	ba 87       	std	Y+10, r27	; 0x0a
		Local_s32NumLengthFactor /= 10;
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	9b 81       	ldd	r25, Y+3	; 0x03
    24bc:	ac 81       	ldd	r26, Y+4	; 0x04
    24be:	bd 81       	ldd	r27, Y+5	; 0x05
    24c0:	2a e0       	ldi	r18, 0x0A	; 10
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__divmodsi4>
    24d0:	da 01       	movw	r26, r20
    24d2:	c9 01       	movw	r24, r18
    24d4:	8a 83       	std	Y+2, r24	; 0x02
    24d6:	9b 83       	std	Y+3, r25	; 0x03
    24d8:	ac 83       	std	Y+4, r26	; 0x04
    24da:	bd 83       	std	Y+5, r27	; 0x05
	Local_s32Temp = Copy_f32Value;
	Local_s32Temp = (s32)((Copy_f32Value-Local_s32Temp)*100);//Get 2 decimal digits of the float

	/*****************************************/
	/*convert the fraction part into a string*/
	for (u8 j=0 ; j<2; j++,i++) {
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	8e 81       	ldd	r24, Y+6	; 0x06
    24e4:	8f 5f       	subi	r24, 0xFF	; 255
    24e6:	8e 83       	std	Y+6, r24	; 0x06
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	08 f4       	brcc	.+2      	; 0x24f0 <Private_vdFloatToString+0x2a6>
    24ee:	b9 cf       	rjmp	.-142    	; 0x2462 <Private_vdFloatToString+0x218>
		pu8_string[i] = (Local_s32Temp / Local_s32NumLengthFactor) + 48;
		Local_s32Temp %= Local_s32NumLengthFactor;
		Local_s32NumLengthFactor /= 10;
	}
	pu8_string[i] = '\0'; //add \0 at the end of the string
    24f0:	8e 81       	ldd	r24, Y+6	; 0x06
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f8:	98 89       	ldd	r25, Y+16	; 0x10
    24fa:	fc 01       	movw	r30, r24
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	10 82       	st	Z, r1

}
    2502:	60 96       	adiw	r28, 0x10	; 16
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	08 95       	ret

00002518 <main>:


/*******************************************************/
/*						Int Main		  			   */
/*******************************************************/
int main(){
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	ec 97       	sbiw	r28, 0x3c	; 60
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61


	/******************************************************/
	/*					Set port for LCD				  */
	/******************************************************/
	DIO_u8SetPortDirection(portA,0xff);
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	6f ef       	ldi	r22, 0xFF	; 255
    253c:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(portA,0x00);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_u8SetPortValue>
	DIO_u8SetPortDirection(portD,0xff);
    2548:	83 e0       	ldi	r24, 0x03	; 3
    254a:	6f ef       	ldi	r22, 0xFF	; 255
    254c:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(portD,0x00);
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_u8SetPortValue>
	LCD_vdInit();
    2558:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_vdInit>


	/******************************************************/
	/*			KeyPad initialize Pull Up Resistor		  */
	/******************************************************/
	DIO_u8SetPortDirection(portB,0xf0);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	60 ef       	ldi	r22, 0xF0	; 240
    2560:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(portB,0xff);
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	6f ef       	ldi	r22, 0xFF	; 255
    2568:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_u8SetPortValue>

	LCD_vdSendCommand(LCD_CURSOR_ON);
    256c:	8f e0       	ldi	r24, 0x0F	; 15
    256e:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
	/*						void loop						*/
	/********************************************************/

	while(1){

		u8 i=0;
    2572:	19 a2       	std	Y+33, r1	; 0x21
		f32 Result=0;
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 e0       	ldi	r26, 0x00	; 0
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	8d 8f       	std	Y+29, r24	; 0x1d
    257e:	9e 8f       	std	Y+30, r25	; 0x1e
    2580:	af 8f       	std	Y+31, r26	; 0x1f
    2582:	b8 a3       	std	Y+32, r27	; 0x20
		u8 kpd=0;
    2584:	1c 8e       	std	Y+28, r1	; 0x1c
		u8 Num_index=0;
    2586:	1b 8e       	std	Y+27, r1	; 0x1b
		u8 	 Number[20]={0};
    2588:	84 e1       	ldi	r24, 0x14	; 20
    258a:	fe 01       	movw	r30, r28
    258c:	b2 96       	adiw	r30, 0x22	; 34
    258e:	df 01       	movw	r26, r30
    2590:	98 2f       	mov	r25, r24
    2592:	1d 92       	st	X+, r1
    2594:	9a 95       	dec	r25
    2596:	e9 f7       	brne	.-6      	; 0x2592 <main+0x7a>
		u8  *operators =malloc(sizeof(u8));
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <malloc>
    25a0:	9a 8f       	std	Y+26, r25	; 0x1a
    25a2:	89 8f       	std	Y+25, r24	; 0x19
		f32 *Operands  =malloc(sizeof(f32));
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <malloc>
    25ac:	98 8f       	std	Y+24, r25	; 0x18
    25ae:	8f 8b       	std	Y+23, r24	; 0x17
		Operands[0]=1.0;
    25b0:	ef 89       	ldd	r30, Y+23	; 0x17
    25b2:	f8 8d       	ldd	r31, Y+24	; 0x18
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 e8       	ldi	r26, 0x80	; 128
    25ba:	bf e3       	ldi	r27, 0x3F	; 63
    25bc:	80 83       	st	Z, r24
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	a2 83       	std	Z+2, r26	; 0x02
    25c2:	b3 83       	std	Z+3, r27	; 0x03
		operators[0]='\0';
    25c4:	e9 8d       	ldd	r30, Y+25	; 0x19
    25c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    25c8:	10 82       	st	Z, r1
		do{
			kpd=Private_u8WaitToPressKey();
    25ca:	0e 94 14 11 	call	0x2228	; 0x2228 <Private_u8WaitToPressKey>
    25ce:	8c 8f       	std	Y+28, r24	; 0x1c
			LCD_vdSendData(kpd);
    25d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25d2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <LCD_vdSendData>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a8 ec       	ldi	r26, 0xC8	; 200
    25dc:	b2 e4       	ldi	r27, 0x42	; 66
    25de:	8b 87       	std	Y+11, r24	; 0x0b
    25e0:	9c 87       	std	Y+12, r25	; 0x0c
    25e2:	ad 87       	std	Y+13, r26	; 0x0d
    25e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a ef       	ldi	r20, 0xFA	; 250
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8f 83       	std	Y+7, r24	; 0x07
    2600:	98 87       	std	Y+8, r25	; 0x08
    2602:	a9 87       	std	Y+9, r26	; 0x09
    2604:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2606:	6f 81       	ldd	r22, Y+7	; 0x07
    2608:	78 85       	ldd	r23, Y+8	; 0x08
    260a:	89 85       	ldd	r24, Y+9	; 0x09
    260c:	9a 85       	ldd	r25, Y+10	; 0x0a
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <main+0x110>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	8d 83       	std	Y+5, r24	; 0x05
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <main+0x18e>
	else if (__tmp > 65535)
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <main+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	6b 85       	ldd	r22, Y+11	; 0x0b
    2642:	7c 85       	ldd	r23, Y+12	; 0x0c
    2644:	8d 85       	ldd	r24, Y+13	; 0x0d
    2646:	9e 85       	ldd	r25, Y+14	; 0x0e
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <main+0x170>
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9c 83       	std	Y+4, r25	; 0x04
    2670:	8b 83       	std	Y+3, r24	; 0x03
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <main+0x15e>
    267a:	9c 83       	std	Y+4, r25	; 0x04
    267c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	9e 81       	ldd	r25, Y+6	; 0x06
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <main+0x152>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <main+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	6f 81       	ldd	r22, Y+7	; 0x07
    2694:	78 85       	ldd	r23, Y+8	; 0x08
    2696:	89 85       	ldd	r24, Y+9	; 0x09
    2698:	9a 85       	ldd	r25, Y+10	; 0x0a
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9e 83       	std	Y+6, r25	; 0x06
    26a4:	8d 83       	std	Y+5, r24	; 0x05
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <main+0x19a>
    26b6:	9a 83       	std	Y+2, r25	; 0x02
    26b8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);

			if((kpd>='0' && kpd<='9') || kpd=='.'){
    26ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26bc:	80 33       	cpi	r24, 0x30	; 48
    26be:	18 f0       	brcs	.+6      	; 0x26c6 <main+0x1ae>
    26c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26c2:	8a 33       	cpi	r24, 0x3A	; 58
    26c4:	18 f0       	brcs	.+6      	; 0x26cc <main+0x1b4>
    26c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26c8:	8e 32       	cpi	r24, 0x2E	; 46
    26ca:	d1 f4       	brne	.+52     	; 0x2700 <main+0x1e8>
				Number[Num_index]=kpd;
    26cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	ce 01       	movw	r24, r28
    26d4:	82 96       	adiw	r24, 0x22	; 34
    26d6:	fc 01       	movw	r30, r24
    26d8:	e2 0f       	add	r30, r18
    26da:	f3 1f       	adc	r31, r19
    26dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26de:	80 83       	st	Z, r24
				Number[Num_index+1]='\0';
    26e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9c 01       	movw	r18, r24
    26e8:	2f 5f       	subi	r18, 0xFF	; 255
    26ea:	3f 4f       	sbci	r19, 0xFF	; 255
    26ec:	ce 01       	movw	r24, r28
    26ee:	82 96       	adiw	r24, 0x22	; 34
    26f0:	fc 01       	movw	r30, r24
    26f2:	e2 0f       	add	r30, r18
    26f4:	f3 1f       	adc	r31, r19
    26f6:	10 82       	st	Z, r1
				Num_index+=1;
    26f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fa:	8f 5f       	subi	r24, 0xFF	; 255
    26fc:	8b 8f       	std	Y+27, r24	; 0x1b
    26fe:	cc c0       	rjmp	.+408    	; 0x2898 <main+0x380>

			}else if(kpd!='='){
    2700:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2702:	8d 33       	cpi	r24, 0x3D	; 61
    2704:	09 f4       	brne	.+2      	; 0x2708 <main+0x1f0>
    2706:	96 c0       	rjmp	.+300    	; 0x2834 <main+0x31c>
				/*Assigning operator and its operand*/
				operators[i]=kpd;
    2708:	89 a1       	ldd	r24, Y+33	; 0x21
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	89 8d       	ldd	r24, Y+25	; 0x19
    2710:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2712:	fc 01       	movw	r30, r24
    2714:	e2 0f       	add	r30, r18
    2716:	f3 1f       	adc	r31, r19
    2718:	8c 8d       	ldd	r24, Y+28	; 0x1c
    271a:	80 83       	st	Z, r24
				Operands[i]*=Private_f32StringToFloat(Number);
    271c:	89 a1       	ldd	r24, Y+33	; 0x21
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9c 01       	movw	r18, r24
    2724:	22 0f       	add	r18, r18
    2726:	33 1f       	adc	r19, r19
    2728:	22 0f       	add	r18, r18
    272a:	33 1f       	adc	r19, r19
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	6c 01       	movw	r12, r24
    2732:	c2 0e       	add	r12, r18
    2734:	d3 1e       	adc	r13, r19
    2736:	89 a1       	ldd	r24, Y+33	; 0x21
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9c 01       	movw	r18, r24
    273e:	22 0f       	add	r18, r18
    2740:	33 1f       	adc	r19, r19
    2742:	22 0f       	add	r18, r18
    2744:	33 1f       	adc	r19, r19
    2746:	8f 89       	ldd	r24, Y+23	; 0x17
    2748:	98 8d       	ldd	r25, Y+24	; 0x18
    274a:	fc 01       	movw	r30, r24
    274c:	e2 0f       	add	r30, r18
    274e:	f3 1f       	adc	r31, r19
    2750:	e0 80       	ld	r14, Z
    2752:	f1 80       	ldd	r15, Z+1	; 0x01
    2754:	02 81       	ldd	r16, Z+2	; 0x02
    2756:	13 81       	ldd	r17, Z+3	; 0x03
    2758:	ce 01       	movw	r24, r28
    275a:	82 96       	adiw	r24, 0x22	; 34
    275c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Private_f32StringToFloat>
    2760:	9b 01       	movw	r18, r22
    2762:	ac 01       	movw	r20, r24
    2764:	c8 01       	movw	r24, r16
    2766:	b7 01       	movw	r22, r14
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	f6 01       	movw	r30, r12
    2772:	80 83       	st	Z, r24
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	a2 83       	std	Z+2, r26	; 0x02
    2778:	b3 83       	std	Z+3, r27	; 0x03
				/*Allocating New memory for next operand & operator*/
				operators=realloc(operators,sizeof(u8)*(i+2));
    277a:	89 a1       	ldd	r24, Y+33	; 0x21
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	02 96       	adiw	r24, 0x02	; 2
    2782:	9c 01       	movw	r18, r24
    2784:	89 8d       	ldd	r24, Y+25	; 0x19
    2786:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2788:	b9 01       	movw	r22, r18
    278a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <realloc>
    278e:	9a 8f       	std	Y+26, r25	; 0x1a
    2790:	89 8f       	std	Y+25, r24	; 0x19
				Operands=realloc(Operands,sizeof(f32)*(i+2));
    2792:	89 a1       	ldd	r24, Y+33	; 0x21
    2794:	88 2f       	mov	r24, r24
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	02 96       	adiw	r24, 0x02	; 2
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	9c 01       	movw	r18, r24
    27a4:	8f 89       	ldd	r24, Y+23	; 0x17
    27a6:	98 8d       	ldd	r25, Y+24	; 0x18
    27a8:	b9 01       	movw	r22, r18
    27aa:	0e 94 98 17 	call	0x2f30	; 0x2f30 <realloc>
    27ae:	98 8f       	std	Y+24, r25	; 0x18
    27b0:	8f 8b       	std	Y+23, r24	; 0x17
				/*Initializing newly allocated memory*/
				operators[i+1]='\0';
    27b2:	89 a1       	ldd	r24, Y+33	; 0x21
    27b4:	88 2f       	mov	r24, r24
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9c 01       	movw	r18, r24
    27ba:	2f 5f       	subi	r18, 0xFF	; 255
    27bc:	3f 4f       	sbci	r19, 0xFF	; 255
    27be:	89 8d       	ldd	r24, Y+25	; 0x19
    27c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27c2:	fc 01       	movw	r30, r24
    27c4:	e2 0f       	add	r30, r18
    27c6:	f3 1f       	adc	r31, r19
    27c8:	10 82       	st	Z, r1
				/*To handle subtraction operator operands*/
				if(kpd=='-'){
    27ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27cc:	8d 32       	cpi	r24, 0x2D	; 45
    27ce:	b9 f4       	brne	.+46     	; 0x27fe <main+0x2e6>
					Operands[i+1]=-1.0;
    27d0:	89 a1       	ldd	r24, Y+33	; 0x21
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	9c 01       	movw	r18, r24
    27da:	22 0f       	add	r18, r18
    27dc:	33 1f       	adc	r19, r19
    27de:	22 0f       	add	r18, r18
    27e0:	33 1f       	adc	r19, r19
    27e2:	8f 89       	ldd	r24, Y+23	; 0x17
    27e4:	98 8d       	ldd	r25, Y+24	; 0x18
    27e6:	fc 01       	movw	r30, r24
    27e8:	e2 0f       	add	r30, r18
    27ea:	f3 1f       	adc	r31, r19
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a0 e8       	ldi	r26, 0x80	; 128
    27f2:	bf eb       	ldi	r27, 0xBF	; 191
    27f4:	80 83       	st	Z, r24
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	a2 83       	std	Z+2, r26	; 0x02
    27fa:	b3 83       	std	Z+3, r27	; 0x03
    27fc:	16 c0       	rjmp	.+44     	; 0x282a <main+0x312>
				}else{
					Operands[i+1]=1.0;
    27fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	9c 01       	movw	r18, r24
    2808:	22 0f       	add	r18, r18
    280a:	33 1f       	adc	r19, r19
    280c:	22 0f       	add	r18, r18
    280e:	33 1f       	adc	r19, r19
    2810:	8f 89       	ldd	r24, Y+23	; 0x17
    2812:	98 8d       	ldd	r25, Y+24	; 0x18
    2814:	fc 01       	movw	r30, r24
    2816:	e2 0f       	add	r30, r18
    2818:	f3 1f       	adc	r31, r19
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a0 e8       	ldi	r26, 0x80	; 128
    2820:	bf e3       	ldi	r27, 0x3F	; 63
    2822:	80 83       	st	Z, r24
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	a2 83       	std	Z+2, r26	; 0x02
    2828:	b3 83       	std	Z+3, r27	; 0x03
				}
				/*Incrementing Index*/
				i+=1;
    282a:	89 a1       	ldd	r24, Y+33	; 0x21
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	89 a3       	std	Y+33, r24	; 0x21
				Num_index=0;
    2830:	1b 8e       	std	Y+27, r1	; 0x1b
    2832:	32 c0       	rjmp	.+100    	; 0x2898 <main+0x380>

			}else if(kpd == '='){
    2834:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2836:	8d 33       	cpi	r24, 0x3D	; 61
    2838:	79 f5       	brne	.+94     	; 0x2898 <main+0x380>
				Operands[i]*=Private_f32StringToFloat(Number);
    283a:	89 a1       	ldd	r24, Y+33	; 0x21
    283c:	88 2f       	mov	r24, r24
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9c 01       	movw	r18, r24
    2842:	22 0f       	add	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	22 0f       	add	r18, r18
    2848:	33 1f       	adc	r19, r19
    284a:	8f 89       	ldd	r24, Y+23	; 0x17
    284c:	98 8d       	ldd	r25, Y+24	; 0x18
    284e:	6c 01       	movw	r12, r24
    2850:	c2 0e       	add	r12, r18
    2852:	d3 1e       	adc	r13, r19
    2854:	89 a1       	ldd	r24, Y+33	; 0x21
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9c 01       	movw	r18, r24
    285c:	22 0f       	add	r18, r18
    285e:	33 1f       	adc	r19, r19
    2860:	22 0f       	add	r18, r18
    2862:	33 1f       	adc	r19, r19
    2864:	8f 89       	ldd	r24, Y+23	; 0x17
    2866:	98 8d       	ldd	r25, Y+24	; 0x18
    2868:	fc 01       	movw	r30, r24
    286a:	e2 0f       	add	r30, r18
    286c:	f3 1f       	adc	r31, r19
    286e:	e0 80       	ld	r14, Z
    2870:	f1 80       	ldd	r15, Z+1	; 0x01
    2872:	02 81       	ldd	r16, Z+2	; 0x02
    2874:	13 81       	ldd	r17, Z+3	; 0x03
    2876:	ce 01       	movw	r24, r28
    2878:	82 96       	adiw	r24, 0x22	; 34
    287a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Private_f32StringToFloat>
    287e:	9b 01       	movw	r18, r22
    2880:	ac 01       	movw	r20, r24
    2882:	c8 01       	movw	r24, r16
    2884:	b7 01       	movw	r22, r14
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	f6 01       	movw	r30, r12
    2890:	80 83       	st	Z, r24
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	a2 83       	std	Z+2, r26	; 0x02
    2896:	b3 83       	std	Z+3, r27	; 0x03
			}

		}while(kpd!='=');
    2898:	8c 8d       	ldd	r24, Y+28	; 0x1c
    289a:	8d 33       	cpi	r24, 0x3D	; 61
    289c:	09 f0       	breq	.+2      	; 0x28a0 <main+0x388>
    289e:	95 ce       	rjmp	.-726    	; 0x25ca <main+0xb2>
		/********************************************************/
		/*				to handle divisors operands				*/
		/********************************************************/
		for(u8 j=0; operators[j]!='\0'; j++){
    28a0:	19 8a       	std	Y+17, r1	; 0x11
    28a2:	45 c0       	rjmp	.+138    	; 0x292e <main+0x416>
			if (operators[j]=='/'){
    28a4:	89 89       	ldd	r24, Y+17	; 0x11
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	89 8d       	ldd	r24, Y+25	; 0x19
    28ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28ae:	fc 01       	movw	r30, r24
    28b0:	e2 0f       	add	r30, r18
    28b2:	f3 1f       	adc	r31, r19
    28b4:	80 81       	ld	r24, Z
    28b6:	8f 32       	cpi	r24, 0x2F	; 47
    28b8:	b9 f5       	brne	.+110    	; 0x2928 <main+0x410>
				operators[j]='*';
    28ba:	89 89       	ldd	r24, Y+17	; 0x11
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	89 8d       	ldd	r24, Y+25	; 0x19
    28c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28c4:	fc 01       	movw	r30, r24
    28c6:	e2 0f       	add	r30, r18
    28c8:	f3 1f       	adc	r31, r19
    28ca:	8a e2       	ldi	r24, 0x2A	; 42
    28cc:	80 83       	st	Z, r24
				Operands[j+1]=1/Operands[j+1];
    28ce:	89 89       	ldd	r24, Y+17	; 0x11
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	9c 01       	movw	r18, r24
    28d8:	22 0f       	add	r18, r18
    28da:	33 1f       	adc	r19, r19
    28dc:	22 0f       	add	r18, r18
    28de:	33 1f       	adc	r19, r19
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	8c 01       	movw	r16, r24
    28e6:	02 0f       	add	r16, r18
    28e8:	13 1f       	adc	r17, r19
    28ea:	89 89       	ldd	r24, Y+17	; 0x11
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	9c 01       	movw	r18, r24
    28f4:	22 0f       	add	r18, r18
    28f6:	33 1f       	adc	r19, r19
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	8f 89       	ldd	r24, Y+23	; 0x17
    28fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2900:	fc 01       	movw	r30, r24
    2902:	e2 0f       	add	r30, r18
    2904:	f3 1f       	adc	r31, r19
    2906:	20 81       	ld	r18, Z
    2908:	31 81       	ldd	r19, Z+1	; 0x01
    290a:	42 81       	ldd	r20, Z+2	; 0x02
    290c:	53 81       	ldd	r21, Z+3	; 0x03
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	80 e8       	ldi	r24, 0x80	; 128
    2914:	9f e3       	ldi	r25, 0x3F	; 63
    2916:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	f8 01       	movw	r30, r16
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03

		}while(kpd!='=');
		/********************************************************/
		/*				to handle divisors operands				*/
		/********************************************************/
		for(u8 j=0; operators[j]!='\0'; j++){
    2928:	89 89       	ldd	r24, Y+17	; 0x11
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	89 8b       	std	Y+17, r24	; 0x11
    292e:	89 89       	ldd	r24, Y+17	; 0x11
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	89 8d       	ldd	r24, Y+25	; 0x19
    2936:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2938:	fc 01       	movw	r30, r24
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	80 81       	ld	r24, Z
    2940:	88 23       	and	r24, r24
    2942:	09 f0       	breq	.+2      	; 0x2946 <main+0x42e>
    2944:	af cf       	rjmp	.-162    	; 0x28a4 <main+0x38c>
			}
		}
		/********************************************************/
		/*					to handle multiplications			*/
		/********************************************************/
		f32 temp=0;
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a0 e0       	ldi	r26, 0x00	; 0
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	8b 8b       	std	Y+19, r24	; 0x13
    2950:	9c 8b       	std	Y+20, r25	; 0x14
    2952:	ad 8b       	std	Y+21, r26	; 0x15
    2954:	be 8b       	std	Y+22, r27	; 0x16
		u8 seq_flag=0;
    2956:	1a 8a       	std	Y+18, r1	; 0x12
		for(u8 j=0; operators[j]!='\0'; j++){
    2958:	18 8a       	std	Y+16, r1	; 0x10
    295a:	da c0       	rjmp	.+436    	; 0x2b10 <main+0x5f8>

			if(!seq_flag && operators[j]=='*'){
    295c:	8a 89       	ldd	r24, Y+18	; 0x12
    295e:	88 23       	and	r24, r24
    2960:	09 f0       	breq	.+2      	; 0x2964 <main+0x44c>
    2962:	68 c0       	rjmp	.+208    	; 0x2a34 <main+0x51c>
    2964:	88 89       	ldd	r24, Y+16	; 0x10
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	89 8d       	ldd	r24, Y+25	; 0x19
    296c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    296e:	fc 01       	movw	r30, r24
    2970:	e2 0f       	add	r30, r18
    2972:	f3 1f       	adc	r31, r19
    2974:	80 81       	ld	r24, Z
    2976:	8a 32       	cpi	r24, 0x2A	; 42
    2978:	09 f0       	breq	.+2      	; 0x297c <main+0x464>
    297a:	5c c0       	rjmp	.+184    	; 0x2a34 <main+0x51c>
				seq_flag=1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	8a 8b       	std	Y+18, r24	; 0x12
				temp=Operands[j]*Operands[j+1];
    2980:	88 89       	ldd	r24, Y+16	; 0x10
    2982:	88 2f       	mov	r24, r24
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	9c 01       	movw	r18, r24
    2988:	22 0f       	add	r18, r18
    298a:	33 1f       	adc	r19, r19
    298c:	22 0f       	add	r18, r18
    298e:	33 1f       	adc	r19, r19
    2990:	8f 89       	ldd	r24, Y+23	; 0x17
    2992:	98 8d       	ldd	r25, Y+24	; 0x18
    2994:	fc 01       	movw	r30, r24
    2996:	e2 0f       	add	r30, r18
    2998:	f3 1f       	adc	r31, r19
    299a:	e0 80       	ld	r14, Z
    299c:	f1 80       	ldd	r15, Z+1	; 0x01
    299e:	02 81       	ldd	r16, Z+2	; 0x02
    29a0:	13 81       	ldd	r17, Z+3	; 0x03
    29a2:	88 89       	ldd	r24, Y+16	; 0x10
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	9c 01       	movw	r18, r24
    29ac:	22 0f       	add	r18, r18
    29ae:	33 1f       	adc	r19, r19
    29b0:	22 0f       	add	r18, r18
    29b2:	33 1f       	adc	r19, r19
    29b4:	8f 89       	ldd	r24, Y+23	; 0x17
    29b6:	98 8d       	ldd	r25, Y+24	; 0x18
    29b8:	fc 01       	movw	r30, r24
    29ba:	e2 0f       	add	r30, r18
    29bc:	f3 1f       	adc	r31, r19
    29be:	20 81       	ld	r18, Z
    29c0:	31 81       	ldd	r19, Z+1	; 0x01
    29c2:	42 81       	ldd	r20, Z+2	; 0x02
    29c4:	53 81       	ldd	r21, Z+3	; 0x03
    29c6:	c8 01       	movw	r24, r16
    29c8:	b7 01       	movw	r22, r14
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8b 8b       	std	Y+19, r24	; 0x13
    29d4:	9c 8b       	std	Y+20, r25	; 0x14
    29d6:	ad 8b       	std	Y+21, r26	; 0x15
    29d8:	be 8b       	std	Y+22, r27	; 0x16
				Operands[j]=Operands[j+1]=0;
    29da:	88 89       	ldd	r24, Y+16	; 0x10
    29dc:	88 2f       	mov	r24, r24
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9c 01       	movw	r18, r24
    29e2:	22 0f       	add	r18, r18
    29e4:	33 1f       	adc	r19, r19
    29e6:	22 0f       	add	r18, r18
    29e8:	33 1f       	adc	r19, r19
    29ea:	8f 89       	ldd	r24, Y+23	; 0x17
    29ec:	98 8d       	ldd	r25, Y+24	; 0x18
    29ee:	ac 01       	movw	r20, r24
    29f0:	42 0f       	add	r20, r18
    29f2:	53 1f       	adc	r21, r19
    29f4:	88 89       	ldd	r24, Y+16	; 0x10
    29f6:	88 2f       	mov	r24, r24
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	9c 01       	movw	r18, r24
    29fe:	22 0f       	add	r18, r18
    2a00:	33 1f       	adc	r19, r19
    2a02:	22 0f       	add	r18, r18
    2a04:	33 1f       	adc	r19, r19
    2a06:	8f 89       	ldd	r24, Y+23	; 0x17
    2a08:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	e2 0f       	add	r30, r18
    2a0e:	f3 1f       	adc	r31, r19
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a0 e0       	ldi	r26, 0x00	; 0
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	80 83       	st	Z, r24
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	a2 83       	std	Z+2, r26	; 0x02
    2a1e:	b3 83       	std	Z+3, r27	; 0x03
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	a2 81       	ldd	r26, Z+2	; 0x02
    2a26:	b3 81       	ldd	r27, Z+3	; 0x03
    2a28:	fa 01       	movw	r30, r20
    2a2a:	80 83       	st	Z, r24
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	a2 83       	std	Z+2, r26	; 0x02
    2a30:	b3 83       	std	Z+3, r27	; 0x03
    2a32:	6b c0       	rjmp	.+214    	; 0x2b0a <main+0x5f2>
			}else if(seq_flag && operators[j]=='*'){
    2a34:	8a 89       	ldd	r24, Y+18	; 0x12
    2a36:	88 23       	and	r24, r24
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <main+0x524>
    2a3a:	40 c0       	rjmp	.+128    	; 0x2abc <main+0x5a4>
    2a3c:	88 89       	ldd	r24, Y+16	; 0x10
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	89 8d       	ldd	r24, Y+25	; 0x19
    2a44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a46:	fc 01       	movw	r30, r24
    2a48:	e2 0f       	add	r30, r18
    2a4a:	f3 1f       	adc	r31, r19
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8a 32       	cpi	r24, 0x2A	; 42
    2a50:	a9 f5       	brne	.+106    	; 0x2abc <main+0x5a4>
				temp *=Operands[j+1];
    2a52:	88 89       	ldd	r24, Y+16	; 0x10
    2a54:	88 2f       	mov	r24, r24
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	9c 01       	movw	r18, r24
    2a5c:	22 0f       	add	r18, r18
    2a5e:	33 1f       	adc	r19, r19
    2a60:	22 0f       	add	r18, r18
    2a62:	33 1f       	adc	r19, r19
    2a64:	8f 89       	ldd	r24, Y+23	; 0x17
    2a66:	98 8d       	ldd	r25, Y+24	; 0x18
    2a68:	fc 01       	movw	r30, r24
    2a6a:	e2 0f       	add	r30, r18
    2a6c:	f3 1f       	adc	r31, r19
    2a6e:	20 81       	ld	r18, Z
    2a70:	31 81       	ldd	r19, Z+1	; 0x01
    2a72:	42 81       	ldd	r20, Z+2	; 0x02
    2a74:	53 81       	ldd	r21, Z+3	; 0x03
    2a76:	6b 89       	ldd	r22, Y+19	; 0x13
    2a78:	7c 89       	ldd	r23, Y+20	; 0x14
    2a7a:	8d 89       	ldd	r24, Y+21	; 0x15
    2a7c:	9e 89       	ldd	r25, Y+22	; 0x16
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8b 8b       	std	Y+19, r24	; 0x13
    2a88:	9c 8b       	std	Y+20, r25	; 0x14
    2a8a:	ad 8b       	std	Y+21, r26	; 0x15
    2a8c:	be 8b       	std	Y+22, r27	; 0x16
				Operands[j+1]=0;
    2a8e:	88 89       	ldd	r24, Y+16	; 0x10
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	01 96       	adiw	r24, 0x01	; 1
    2a96:	9c 01       	movw	r18, r24
    2a98:	22 0f       	add	r18, r18
    2a9a:	33 1f       	adc	r19, r19
    2a9c:	22 0f       	add	r18, r18
    2a9e:	33 1f       	adc	r19, r19
    2aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e2 0f       	add	r30, r18
    2aa8:	f3 1f       	adc	r31, r19
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a0 e0       	ldi	r26, 0x00	; 0
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	80 83       	st	Z, r24
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	a2 83       	std	Z+2, r26	; 0x02
    2ab8:	b3 83       	std	Z+3, r27	; 0x03
    2aba:	27 c0       	rjmp	.+78     	; 0x2b0a <main+0x5f2>
			}else if(seq_flag && operators[j]!='*'){
    2abc:	8a 89       	ldd	r24, Y+18	; 0x12
    2abe:	88 23       	and	r24, r24
    2ac0:	21 f1       	breq	.+72     	; 0x2b0a <main+0x5f2>
    2ac2:	88 89       	ldd	r24, Y+16	; 0x10
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	89 8d       	ldd	r24, Y+25	; 0x19
    2aca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2acc:	fc 01       	movw	r30, r24
    2ace:	e2 0f       	add	r30, r18
    2ad0:	f3 1f       	adc	r31, r19
    2ad2:	80 81       	ld	r24, Z
    2ad4:	8a 32       	cpi	r24, 0x2A	; 42
    2ad6:	c9 f0       	breq	.+50     	; 0x2b0a <main+0x5f2>
				seq_flag=0;
    2ad8:	1a 8a       	std	Y+18, r1	; 0x12
				Result+=temp;
    2ada:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2adc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2ade:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae0:	98 a1       	ldd	r25, Y+32	; 0x20
    2ae2:	2b 89       	ldd	r18, Y+19	; 0x13
    2ae4:	3c 89       	ldd	r19, Y+20	; 0x14
    2ae6:	4d 89       	ldd	r20, Y+21	; 0x15
    2ae8:	5e 89       	ldd	r21, Y+22	; 0x16
    2aea:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	8d 8f       	std	Y+29, r24	; 0x1d
    2af4:	9e 8f       	std	Y+30, r25	; 0x1e
    2af6:	af 8f       	std	Y+31, r26	; 0x1f
    2af8:	b8 a3       	std	Y+32, r27	; 0x20
				temp=0;
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	9c 8b       	std	Y+20, r25	; 0x14
    2b06:	ad 8b       	std	Y+21, r26	; 0x15
    2b08:	be 8b       	std	Y+22, r27	; 0x16
		/********************************************************/
		/*					to handle multiplications			*/
		/********************************************************/
		f32 temp=0;
		u8 seq_flag=0;
		for(u8 j=0; operators[j]!='\0'; j++){
    2b0a:	88 89       	ldd	r24, Y+16	; 0x10
    2b0c:	8f 5f       	subi	r24, 0xFF	; 255
    2b0e:	88 8b       	std	Y+16, r24	; 0x10
    2b10:	88 89       	ldd	r24, Y+16	; 0x10
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	89 8d       	ldd	r24, Y+25	; 0x19
    2b18:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	e2 0f       	add	r30, r18
    2b1e:	f3 1f       	adc	r31, r19
    2b20:	80 81       	ld	r24, Z
    2b22:	88 23       	and	r24, r24
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <main+0x610>
    2b26:	1a cf       	rjmp	.-460    	; 0x295c <main+0x444>
				seq_flag=0;
				Result+=temp;
				temp=0;
			}
		}
		Result+=temp;
    2b28:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b2a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b2e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b30:	2b 89       	ldd	r18, Y+19	; 0x13
    2b32:	3c 89       	ldd	r19, Y+20	; 0x14
    2b34:	4d 89       	ldd	r20, Y+21	; 0x15
    2b36:	5e 89       	ldd	r21, Y+22	; 0x16
    2b38:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8d 8f       	std	Y+29, r24	; 0x1d
    2b42:	9e 8f       	std	Y+30, r25	; 0x1e
    2b44:	af 8f       	std	Y+31, r26	; 0x1f
    2b46:	b8 a3       	std	Y+32, r27	; 0x20
		/********************************************************/
		/*			Handling summation and subtraction			*/
		/********************************************************/
		for(u8 j=0; j<=i; j++){
    2b48:	1f 86       	std	Y+15, r1	; 0x0f
    2b4a:	20 c0       	rjmp	.+64     	; 0x2b8c <main+0x674>
			Result+=Operands[j];
    2b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9c 01       	movw	r18, r24
    2b54:	22 0f       	add	r18, r18
    2b56:	33 1f       	adc	r19, r19
    2b58:	22 0f       	add	r18, r18
    2b5a:	33 1f       	adc	r19, r19
    2b5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	20 81       	ld	r18, Z
    2b68:	31 81       	ldd	r19, Z+1	; 0x01
    2b6a:	42 81       	ldd	r20, Z+2	; 0x02
    2b6c:	53 81       	ldd	r21, Z+3	; 0x03
    2b6e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b70:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b74:	98 a1       	ldd	r25, Y+32	; 0x20
    2b76:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b80:	9e 8f       	std	Y+30, r25	; 0x1e
    2b82:	af 8f       	std	Y+31, r26	; 0x1f
    2b84:	b8 a3       	std	Y+32, r27	; 0x20
		}
		Result+=temp;
		/********************************************************/
		/*			Handling summation and subtraction			*/
		/********************************************************/
		for(u8 j=0; j<=i; j++){
    2b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b88:	8f 5f       	subi	r24, 0xFF	; 255
    2b8a:	8f 87       	std	Y+15, r24	; 0x0f
    2b8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b90:	89 17       	cp	r24, r25
    2b92:	e0 f6       	brcc	.-72     	; 0x2b4c <main+0x634>
			Result+=Operands[j];
		}
		/********************************************************/
		/*			Converting result to String					*/
		/********************************************************/
		u8 StringResult[7]={0};
    2b94:	87 e0       	ldi	r24, 0x07	; 7
    2b96:	fe 01       	movw	r30, r28
    2b98:	f6 96       	adiw	r30, 0x36	; 54
    2b9a:	df 01       	movw	r26, r30
    2b9c:	98 2f       	mov	r25, r24
    2b9e:	1d 92       	st	X+, r1
    2ba0:	9a 95       	dec	r25
    2ba2:	e9 f7       	brne	.-6      	; 0x2b9e <main+0x686>
		Private_vdFloatToString(Result,StringResult);
    2ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ba6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ba8:	af 8d       	ldd	r26, Y+31	; 0x1f
    2baa:	b8 a1       	ldd	r27, Y+32	; 0x20
    2bac:	9e 01       	movw	r18, r28
    2bae:	2a 5c       	subi	r18, 0xCA	; 202
    2bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	a9 01       	movw	r20, r18
    2bb8:	0e 94 25 11 	call	0x224a	; 0x224a <Private_vdFloatToString>
		/********************************************************/
		/*					Printing result 					*/
		/********************************************************/
		LCD_vdSendCommand(LCD_CURSOR_OFF);
    2bbc:	8c e0       	ldi	r24, 0x0C	; 12
    2bbe:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
		LCD_vdSendCommand(LCD_RETHOME);
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
		LCD_vdSendStringToPos(1,10,StringResult);
    2bc8:	9e 01       	movw	r18, r28
    2bca:	2a 5c       	subi	r18, 0xCA	; 202
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	6a e0       	ldi	r22, 0x0A	; 10
    2bd2:	a9 01       	movw	r20, r18
    2bd4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LCD_vdSendStringToPos>
		Private_u8WaitToPressKey();
    2bd8:	0e 94 14 11 	call	0x2228	; 0x2228 <Private_u8WaitToPressKey>
		/********************************************************/
		/*					Reset screen						*/
		/********************************************************/
		LCD_vdSendCommand(LCD_CLRDISP);
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
		LCD_vdSendCommand(LCD_CURSOR_ON);
    2be2:	8f e0       	ldi	r24, 0x0F	; 15
    2be4:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
		LCD_vdSendCommand(LCD_INCREMENT_CURSOR);
    2be8:	86 e0       	ldi	r24, 0x06	; 6
    2bea:	0e 94 4f 0b 	call	0x169e	; 0x169e <LCD_vdSendCommand>
		/********************************************************/
		/*					Deallocating memory					*/
		/********************************************************/
		free(operators);
    2bee:	89 8d       	ldd	r24, Y+25	; 0x19
    2bf0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bf2:	0e 94 40 17 	call	0x2e80	; 0x2e80 <free>
		free(Operands);
    2bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfa:	0e 94 40 17 	call	0x2e80	; 0x2e80 <free>
    2bfe:	b9 cc       	rjmp	.-1678   	; 0x2572 <main+0x5a>

00002c00 <__mulsi3>:
    2c00:	62 9f       	mul	r22, r18
    2c02:	d0 01       	movw	r26, r0
    2c04:	73 9f       	mul	r23, r19
    2c06:	f0 01       	movw	r30, r0
    2c08:	82 9f       	mul	r24, r18
    2c0a:	e0 0d       	add	r30, r0
    2c0c:	f1 1d       	adc	r31, r1
    2c0e:	64 9f       	mul	r22, r20
    2c10:	e0 0d       	add	r30, r0
    2c12:	f1 1d       	adc	r31, r1
    2c14:	92 9f       	mul	r25, r18
    2c16:	f0 0d       	add	r31, r0
    2c18:	83 9f       	mul	r24, r19
    2c1a:	f0 0d       	add	r31, r0
    2c1c:	74 9f       	mul	r23, r20
    2c1e:	f0 0d       	add	r31, r0
    2c20:	65 9f       	mul	r22, r21
    2c22:	f0 0d       	add	r31, r0
    2c24:	99 27       	eor	r25, r25
    2c26:	72 9f       	mul	r23, r18
    2c28:	b0 0d       	add	r27, r0
    2c2a:	e1 1d       	adc	r30, r1
    2c2c:	f9 1f       	adc	r31, r25
    2c2e:	63 9f       	mul	r22, r19
    2c30:	b0 0d       	add	r27, r0
    2c32:	e1 1d       	adc	r30, r1
    2c34:	f9 1f       	adc	r31, r25
    2c36:	bd 01       	movw	r22, r26
    2c38:	cf 01       	movw	r24, r30
    2c3a:	11 24       	eor	r1, r1
    2c3c:	08 95       	ret

00002c3e <__divmodsi4>:
    2c3e:	97 fb       	bst	r25, 7
    2c40:	09 2e       	mov	r0, r25
    2c42:	05 26       	eor	r0, r21
    2c44:	0e d0       	rcall	.+28     	; 0x2c62 <__divmodsi4_neg1>
    2c46:	57 fd       	sbrc	r21, 7
    2c48:	04 d0       	rcall	.+8      	; 0x2c52 <__divmodsi4_neg2>
    2c4a:	14 d0       	rcall	.+40     	; 0x2c74 <__udivmodsi4>
    2c4c:	0a d0       	rcall	.+20     	; 0x2c62 <__divmodsi4_neg1>
    2c4e:	00 1c       	adc	r0, r0
    2c50:	38 f4       	brcc	.+14     	; 0x2c60 <__divmodsi4_exit>

00002c52 <__divmodsi4_neg2>:
    2c52:	50 95       	com	r21
    2c54:	40 95       	com	r20
    2c56:	30 95       	com	r19
    2c58:	21 95       	neg	r18
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2c5e:	5f 4f       	sbci	r21, 0xFF	; 255

00002c60 <__divmodsi4_exit>:
    2c60:	08 95       	ret

00002c62 <__divmodsi4_neg1>:
    2c62:	f6 f7       	brtc	.-4      	; 0x2c60 <__divmodsi4_exit>
    2c64:	90 95       	com	r25
    2c66:	80 95       	com	r24
    2c68:	70 95       	com	r23
    2c6a:	61 95       	neg	r22
    2c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c70:	9f 4f       	sbci	r25, 0xFF	; 255
    2c72:	08 95       	ret

00002c74 <__udivmodsi4>:
    2c74:	a1 e2       	ldi	r26, 0x21	; 33
    2c76:	1a 2e       	mov	r1, r26
    2c78:	aa 1b       	sub	r26, r26
    2c7a:	bb 1b       	sub	r27, r27
    2c7c:	fd 01       	movw	r30, r26
    2c7e:	0d c0       	rjmp	.+26     	; 0x2c9a <__udivmodsi4_ep>

00002c80 <__udivmodsi4_loop>:
    2c80:	aa 1f       	adc	r26, r26
    2c82:	bb 1f       	adc	r27, r27
    2c84:	ee 1f       	adc	r30, r30
    2c86:	ff 1f       	adc	r31, r31
    2c88:	a2 17       	cp	r26, r18
    2c8a:	b3 07       	cpc	r27, r19
    2c8c:	e4 07       	cpc	r30, r20
    2c8e:	f5 07       	cpc	r31, r21
    2c90:	20 f0       	brcs	.+8      	; 0x2c9a <__udivmodsi4_ep>
    2c92:	a2 1b       	sub	r26, r18
    2c94:	b3 0b       	sbc	r27, r19
    2c96:	e4 0b       	sbc	r30, r20
    2c98:	f5 0b       	sbc	r31, r21

00002c9a <__udivmodsi4_ep>:
    2c9a:	66 1f       	adc	r22, r22
    2c9c:	77 1f       	adc	r23, r23
    2c9e:	88 1f       	adc	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	1a 94       	dec	r1
    2ca4:	69 f7       	brne	.-38     	; 0x2c80 <__udivmodsi4_loop>
    2ca6:	60 95       	com	r22
    2ca8:	70 95       	com	r23
    2caa:	80 95       	com	r24
    2cac:	90 95       	com	r25
    2cae:	9b 01       	movw	r18, r22
    2cb0:	ac 01       	movw	r20, r24
    2cb2:	bd 01       	movw	r22, r26
    2cb4:	cf 01       	movw	r24, r30
    2cb6:	08 95       	ret

00002cb8 <__prologue_saves__>:
    2cb8:	2f 92       	push	r2
    2cba:	3f 92       	push	r3
    2cbc:	4f 92       	push	r4
    2cbe:	5f 92       	push	r5
    2cc0:	6f 92       	push	r6
    2cc2:	7f 92       	push	r7
    2cc4:	8f 92       	push	r8
    2cc6:	9f 92       	push	r9
    2cc8:	af 92       	push	r10
    2cca:	bf 92       	push	r11
    2ccc:	cf 92       	push	r12
    2cce:	df 92       	push	r13
    2cd0:	ef 92       	push	r14
    2cd2:	ff 92       	push	r15
    2cd4:	0f 93       	push	r16
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	ca 1b       	sub	r28, r26
    2ce2:	db 0b       	sbc	r29, r27
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	09 94       	ijmp

00002cf0 <__epilogue_restores__>:
    2cf0:	2a 88       	ldd	r2, Y+18	; 0x12
    2cf2:	39 88       	ldd	r3, Y+17	; 0x11
    2cf4:	48 88       	ldd	r4, Y+16	; 0x10
    2cf6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cf8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d00:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d02:	b9 84       	ldd	r11, Y+9	; 0x09
    2d04:	c8 84       	ldd	r12, Y+8	; 0x08
    2d06:	df 80       	ldd	r13, Y+7	; 0x07
    2d08:	ee 80       	ldd	r14, Y+6	; 0x06
    2d0a:	fd 80       	ldd	r15, Y+5	; 0x05
    2d0c:	0c 81       	ldd	r16, Y+4	; 0x04
    2d0e:	1b 81       	ldd	r17, Y+3	; 0x03
    2d10:	aa 81       	ldd	r26, Y+2	; 0x02
    2d12:	b9 81       	ldd	r27, Y+1	; 0x01
    2d14:	ce 0f       	add	r28, r30
    2d16:	d1 1d       	adc	r29, r1
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	ed 01       	movw	r28, r26
    2d24:	08 95       	ret

00002d26 <malloc>:
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	82 30       	cpi	r24, 0x02	; 2
    2d2e:	91 05       	cpc	r25, r1
    2d30:	10 f4       	brcc	.+4      	; 0x2d36 <malloc+0x10>
    2d32:	62 e0       	ldi	r22, 0x02	; 2
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	a0 91 80 01 	lds	r26, 0x0180
    2d3a:	b0 91 81 01 	lds	r27, 0x0181
    2d3e:	ed 01       	movw	r28, r26
    2d40:	e0 e0       	ldi	r30, 0x00	; 0
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	21 c0       	rjmp	.+66     	; 0x2d8c <malloc+0x66>
    2d4a:	88 81       	ld	r24, Y
    2d4c:	99 81       	ldd	r25, Y+1	; 0x01
    2d4e:	86 17       	cp	r24, r22
    2d50:	97 07       	cpc	r25, r23
    2d52:	69 f4       	brne	.+26     	; 0x2d6e <malloc+0x48>
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	9b 81       	ldd	r25, Y+3	; 0x03
    2d58:	30 97       	sbiw	r30, 0x00	; 0
    2d5a:	19 f0       	breq	.+6      	; 0x2d62 <malloc+0x3c>
    2d5c:	93 83       	std	Z+3, r25	; 0x03
    2d5e:	82 83       	std	Z+2, r24	; 0x02
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <malloc+0x44>
    2d62:	90 93 81 01 	sts	0x0181, r25
    2d66:	80 93 80 01 	sts	0x0180, r24
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	34 c0       	rjmp	.+104    	; 0x2dd6 <malloc+0xb0>
    2d6e:	68 17       	cp	r22, r24
    2d70:	79 07       	cpc	r23, r25
    2d72:	38 f4       	brcc	.+14     	; 0x2d82 <malloc+0x5c>
    2d74:	41 15       	cp	r20, r1
    2d76:	51 05       	cpc	r21, r1
    2d78:	19 f0       	breq	.+6      	; 0x2d80 <malloc+0x5a>
    2d7a:	84 17       	cp	r24, r20
    2d7c:	95 07       	cpc	r25, r21
    2d7e:	08 f4       	brcc	.+2      	; 0x2d82 <malloc+0x5c>
    2d80:	ac 01       	movw	r20, r24
    2d82:	fe 01       	movw	r30, r28
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	9c 01       	movw	r18, r24
    2d8a:	e9 01       	movw	r28, r18
    2d8c:	20 97       	sbiw	r28, 0x00	; 0
    2d8e:	e9 f6       	brne	.-70     	; 0x2d4a <malloc+0x24>
    2d90:	41 15       	cp	r20, r1
    2d92:	51 05       	cpc	r21, r1
    2d94:	a9 f1       	breq	.+106    	; 0x2e00 <malloc+0xda>
    2d96:	ca 01       	movw	r24, r20
    2d98:	86 1b       	sub	r24, r22
    2d9a:	97 0b       	sbc	r25, r23
    2d9c:	04 97       	sbiw	r24, 0x04	; 4
    2d9e:	08 f4       	brcc	.+2      	; 0x2da2 <malloc+0x7c>
    2da0:	ba 01       	movw	r22, r20
    2da2:	e0 e0       	ldi	r30, 0x00	; 0
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	2a c0       	rjmp	.+84     	; 0x2dfc <malloc+0xd6>
    2da8:	8d 91       	ld	r24, X+
    2daa:	9c 91       	ld	r25, X
    2dac:	11 97       	sbiw	r26, 0x01	; 1
    2dae:	84 17       	cp	r24, r20
    2db0:	95 07       	cpc	r25, r21
    2db2:	f9 f4       	brne	.+62     	; 0x2df2 <malloc+0xcc>
    2db4:	64 17       	cp	r22, r20
    2db6:	75 07       	cpc	r23, r21
    2db8:	81 f4       	brne	.+32     	; 0x2dda <malloc+0xb4>
    2dba:	12 96       	adiw	r26, 0x02	; 2
    2dbc:	8d 91       	ld	r24, X+
    2dbe:	9c 91       	ld	r25, X
    2dc0:	13 97       	sbiw	r26, 0x03	; 3
    2dc2:	30 97       	sbiw	r30, 0x00	; 0
    2dc4:	19 f0       	breq	.+6      	; 0x2dcc <malloc+0xa6>
    2dc6:	93 83       	std	Z+3, r25	; 0x03
    2dc8:	82 83       	std	Z+2, r24	; 0x02
    2dca:	04 c0       	rjmp	.+8      	; 0x2dd4 <malloc+0xae>
    2dcc:	90 93 81 01 	sts	0x0181, r25
    2dd0:	80 93 80 01 	sts	0x0180, r24
    2dd4:	fd 01       	movw	r30, r26
    2dd6:	32 96       	adiw	r30, 0x02	; 2
    2dd8:	4f c0       	rjmp	.+158    	; 0x2e78 <malloc+0x152>
    2dda:	ca 01       	movw	r24, r20
    2ddc:	86 1b       	sub	r24, r22
    2dde:	97 0b       	sbc	r25, r23
    2de0:	fd 01       	movw	r30, r26
    2de2:	e8 0f       	add	r30, r24
    2de4:	f9 1f       	adc	r31, r25
    2de6:	61 93       	st	Z+, r22
    2de8:	71 93       	st	Z+, r23
    2dea:	02 97       	sbiw	r24, 0x02	; 2
    2dec:	8d 93       	st	X+, r24
    2dee:	9c 93       	st	X, r25
    2df0:	43 c0       	rjmp	.+134    	; 0x2e78 <malloc+0x152>
    2df2:	fd 01       	movw	r30, r26
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	9c 01       	movw	r18, r24
    2dfa:	d9 01       	movw	r26, r18
    2dfc:	10 97       	sbiw	r26, 0x00	; 0
    2dfe:	a1 f6       	brne	.-88     	; 0x2da8 <malloc+0x82>
    2e00:	80 91 7e 01 	lds	r24, 0x017E
    2e04:	90 91 7f 01 	lds	r25, 0x017F
    2e08:	89 2b       	or	r24, r25
    2e0a:	41 f4       	brne	.+16     	; 0x2e1c <malloc+0xf6>
    2e0c:	80 91 6a 01 	lds	r24, 0x016A
    2e10:	90 91 6b 01 	lds	r25, 0x016B
    2e14:	90 93 7f 01 	sts	0x017F, r25
    2e18:	80 93 7e 01 	sts	0x017E, r24
    2e1c:	40 91 6c 01 	lds	r20, 0x016C
    2e20:	50 91 6d 01 	lds	r21, 0x016D
    2e24:	41 15       	cp	r20, r1
    2e26:	51 05       	cpc	r21, r1
    2e28:	41 f4       	brne	.+16     	; 0x2e3a <malloc+0x114>
    2e2a:	4d b7       	in	r20, 0x3d	; 61
    2e2c:	5e b7       	in	r21, 0x3e	; 62
    2e2e:	80 91 68 01 	lds	r24, 0x0168
    2e32:	90 91 69 01 	lds	r25, 0x0169
    2e36:	48 1b       	sub	r20, r24
    2e38:	59 0b       	sbc	r21, r25
    2e3a:	20 91 7e 01 	lds	r18, 0x017E
    2e3e:	30 91 7f 01 	lds	r19, 0x017F
    2e42:	24 17       	cp	r18, r20
    2e44:	35 07       	cpc	r19, r21
    2e46:	b0 f4       	brcc	.+44     	; 0x2e74 <malloc+0x14e>
    2e48:	ca 01       	movw	r24, r20
    2e4a:	82 1b       	sub	r24, r18
    2e4c:	93 0b       	sbc	r25, r19
    2e4e:	86 17       	cp	r24, r22
    2e50:	97 07       	cpc	r25, r23
    2e52:	80 f0       	brcs	.+32     	; 0x2e74 <malloc+0x14e>
    2e54:	ab 01       	movw	r20, r22
    2e56:	4e 5f       	subi	r20, 0xFE	; 254
    2e58:	5f 4f       	sbci	r21, 0xFF	; 255
    2e5a:	84 17       	cp	r24, r20
    2e5c:	95 07       	cpc	r25, r21
    2e5e:	50 f0       	brcs	.+20     	; 0x2e74 <malloc+0x14e>
    2e60:	42 0f       	add	r20, r18
    2e62:	53 1f       	adc	r21, r19
    2e64:	50 93 7f 01 	sts	0x017F, r21
    2e68:	40 93 7e 01 	sts	0x017E, r20
    2e6c:	f9 01       	movw	r30, r18
    2e6e:	61 93       	st	Z+, r22
    2e70:	71 93       	st	Z+, r23
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <malloc+0x152>
    2e74:	e0 e0       	ldi	r30, 0x00	; 0
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	cf 01       	movw	r24, r30
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	08 95       	ret

00002e80 <free>:
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <free+0xa>
    2e88:	50 c0       	rjmp	.+160    	; 0x2f2a <free+0xaa>
    2e8a:	ec 01       	movw	r28, r24
    2e8c:	22 97       	sbiw	r28, 0x02	; 2
    2e8e:	1b 82       	std	Y+3, r1	; 0x03
    2e90:	1a 82       	std	Y+2, r1	; 0x02
    2e92:	a0 91 80 01 	lds	r26, 0x0180
    2e96:	b0 91 81 01 	lds	r27, 0x0181
    2e9a:	10 97       	sbiw	r26, 0x00	; 0
    2e9c:	09 f1       	breq	.+66     	; 0x2ee0 <free+0x60>
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	ac 17       	cp	r26, r28
    2ea4:	bd 07       	cpc	r27, r29
    2ea6:	08 f1       	brcs	.+66     	; 0x2eea <free+0x6a>
    2ea8:	bb 83       	std	Y+3, r27	; 0x03
    2eaa:	aa 83       	std	Y+2, r26	; 0x02
    2eac:	fe 01       	movw	r30, r28
    2eae:	21 91       	ld	r18, Z+
    2eb0:	31 91       	ld	r19, Z+
    2eb2:	e2 0f       	add	r30, r18
    2eb4:	f3 1f       	adc	r31, r19
    2eb6:	ae 17       	cp	r26, r30
    2eb8:	bf 07       	cpc	r27, r31
    2eba:	79 f4       	brne	.+30     	; 0x2eda <free+0x5a>
    2ebc:	8d 91       	ld	r24, X+
    2ebe:	9c 91       	ld	r25, X
    2ec0:	11 97       	sbiw	r26, 0x01	; 1
    2ec2:	28 0f       	add	r18, r24
    2ec4:	39 1f       	adc	r19, r25
    2ec6:	2e 5f       	subi	r18, 0xFE	; 254
    2ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eca:	39 83       	std	Y+1, r19	; 0x01
    2ecc:	28 83       	st	Y, r18
    2ece:	12 96       	adiw	r26, 0x02	; 2
    2ed0:	8d 91       	ld	r24, X+
    2ed2:	9c 91       	ld	r25, X
    2ed4:	13 97       	sbiw	r26, 0x03	; 3
    2ed6:	9b 83       	std	Y+3, r25	; 0x03
    2ed8:	8a 83       	std	Y+2, r24	; 0x02
    2eda:	41 15       	cp	r20, r1
    2edc:	51 05       	cpc	r21, r1
    2ede:	71 f4       	brne	.+28     	; 0x2efc <free+0x7c>
    2ee0:	d0 93 81 01 	sts	0x0181, r29
    2ee4:	c0 93 80 01 	sts	0x0180, r28
    2ee8:	20 c0       	rjmp	.+64     	; 0x2f2a <free+0xaa>
    2eea:	12 96       	adiw	r26, 0x02	; 2
    2eec:	8d 91       	ld	r24, X+
    2eee:	9c 91       	ld	r25, X
    2ef0:	13 97       	sbiw	r26, 0x03	; 3
    2ef2:	ad 01       	movw	r20, r26
    2ef4:	00 97       	sbiw	r24, 0x00	; 0
    2ef6:	11 f0       	breq	.+4      	; 0x2efc <free+0x7c>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	d3 cf       	rjmp	.-90     	; 0x2ea2 <free+0x22>
    2efc:	fa 01       	movw	r30, r20
    2efe:	d3 83       	std	Z+3, r29	; 0x03
    2f00:	c2 83       	std	Z+2, r28	; 0x02
    2f02:	21 91       	ld	r18, Z+
    2f04:	31 91       	ld	r19, Z+
    2f06:	e2 0f       	add	r30, r18
    2f08:	f3 1f       	adc	r31, r19
    2f0a:	ce 17       	cp	r28, r30
    2f0c:	df 07       	cpc	r29, r31
    2f0e:	69 f4       	brne	.+26     	; 0x2f2a <free+0xaa>
    2f10:	88 81       	ld	r24, Y
    2f12:	99 81       	ldd	r25, Y+1	; 0x01
    2f14:	28 0f       	add	r18, r24
    2f16:	39 1f       	adc	r19, r25
    2f18:	2e 5f       	subi	r18, 0xFE	; 254
    2f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1c:	fa 01       	movw	r30, r20
    2f1e:	31 83       	std	Z+1, r19	; 0x01
    2f20:	20 83       	st	Z, r18
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	9b 81       	ldd	r25, Y+3	; 0x03
    2f26:	93 83       	std	Z+3, r25	; 0x03
    2f28:	82 83       	std	Z+2, r24	; 0x02
    2f2a:	df 91       	pop	r29
    2f2c:	cf 91       	pop	r28
    2f2e:	08 95       	ret

00002f30 <realloc>:
    2f30:	a0 e0       	ldi	r26, 0x00	; 0
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	ee e9       	ldi	r30, 0x9E	; 158
    2f36:	f7 e1       	ldi	r31, 0x17	; 23
    2f38:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__prologue_saves__+0xc>
    2f3c:	8c 01       	movw	r16, r24
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	29 f4       	brne	.+10     	; 0x2f4c <realloc+0x1c>
    2f42:	cb 01       	movw	r24, r22
    2f44:	0e 94 93 16 	call	0x2d26	; 0x2d26 <malloc>
    2f48:	8c 01       	movw	r16, r24
    2f4a:	ba c0       	rjmp	.+372    	; 0x30c0 <realloc+0x190>
    2f4c:	9e ef       	ldi	r25, 0xFE	; 254
    2f4e:	e9 2e       	mov	r14, r25
    2f50:	9f ef       	ldi	r25, 0xFF	; 255
    2f52:	f9 2e       	mov	r15, r25
    2f54:	e0 0e       	add	r14, r16
    2f56:	f1 1e       	adc	r15, r17
    2f58:	58 01       	movw	r10, r16
    2f5a:	a6 0e       	add	r10, r22
    2f5c:	b7 1e       	adc	r11, r23
    2f5e:	ae 14       	cp	r10, r14
    2f60:	bf 04       	cpc	r11, r15
    2f62:	08 f4       	brcc	.+2      	; 0x2f66 <realloc+0x36>
    2f64:	ab c0       	rjmp	.+342    	; 0x30bc <realloc+0x18c>
    2f66:	8e ef       	ldi	r24, 0xFE	; 254
    2f68:	88 2e       	mov	r8, r24
    2f6a:	8f ef       	ldi	r24, 0xFF	; 255
    2f6c:	98 2e       	mov	r9, r24
    2f6e:	8a 0c       	add	r8, r10
    2f70:	9b 1c       	adc	r9, r11
    2f72:	e7 01       	movw	r28, r14
    2f74:	48 81       	ld	r20, Y
    2f76:	59 81       	ldd	r21, Y+1	; 0x01
    2f78:	46 17       	cp	r20, r22
    2f7a:	57 07       	cpc	r21, r23
    2f7c:	b8 f0       	brcs	.+46     	; 0x2fac <realloc+0x7c>
    2f7e:	45 30       	cpi	r20, 0x05	; 5
    2f80:	51 05       	cpc	r21, r1
    2f82:	08 f4       	brcc	.+2      	; 0x2f86 <realloc+0x56>
    2f84:	9d c0       	rjmp	.+314    	; 0x30c0 <realloc+0x190>
    2f86:	ca 01       	movw	r24, r20
    2f88:	04 97       	sbiw	r24, 0x04	; 4
    2f8a:	86 17       	cp	r24, r22
    2f8c:	97 07       	cpc	r25, r23
    2f8e:	08 f4       	brcc	.+2      	; 0x2f92 <realloc+0x62>
    2f90:	97 c0       	rjmp	.+302    	; 0x30c0 <realloc+0x190>
    2f92:	42 50       	subi	r20, 0x02	; 2
    2f94:	50 40       	sbci	r21, 0x00	; 0
    2f96:	46 1b       	sub	r20, r22
    2f98:	57 0b       	sbc	r21, r23
    2f9a:	f4 01       	movw	r30, r8
    2f9c:	51 83       	std	Z+1, r21	; 0x01
    2f9e:	40 83       	st	Z, r20
    2fa0:	79 83       	std	Y+1, r23	; 0x01
    2fa2:	68 83       	st	Y, r22
    2fa4:	c5 01       	movw	r24, r10
    2fa6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <free>
    2faa:	8a c0       	rjmp	.+276    	; 0x30c0 <realloc+0x190>
    2fac:	6b 01       	movw	r12, r22
    2fae:	c4 1a       	sub	r12, r20
    2fb0:	d5 0a       	sbc	r13, r21
    2fb2:	e0 91 80 01 	lds	r30, 0x0180
    2fb6:	f0 91 81 01 	lds	r31, 0x0181
    2fba:	a0 e0       	ldi	r26, 0x00	; 0
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	c0 e0       	ldi	r28, 0x00	; 0
    2fc0:	d0 e0       	ldi	r29, 0x00	; 0
    2fc2:	42 c0       	rjmp	.+132    	; 0x3048 <realloc+0x118>
    2fc4:	e8 15       	cp	r30, r8
    2fc6:	f9 05       	cpc	r31, r9
    2fc8:	a1 f5       	brne	.+104    	; 0x3032 <realloc+0x102>
    2fca:	20 81       	ld	r18, Z
    2fcc:	31 81       	ldd	r19, Z+1	; 0x01
    2fce:	2c 15       	cp	r18, r12
    2fd0:	3d 05       	cpc	r19, r13
    2fd2:	78 f1       	brcs	.+94     	; 0x3032 <realloc+0x102>
    2fd4:	c9 01       	movw	r24, r18
    2fd6:	02 96       	adiw	r24, 0x02	; 2
    2fd8:	8c 15       	cp	r24, r12
    2fda:	9d 05       	cpc	r25, r13
    2fdc:	a8 f0       	brcs	.+42     	; 0x3008 <realloc+0xd8>
    2fde:	4e 5f       	subi	r20, 0xFE	; 254
    2fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe2:	42 0f       	add	r20, r18
    2fe4:	53 1f       	adc	r21, r19
    2fe6:	e7 01       	movw	r28, r14
    2fe8:	59 83       	std	Y+1, r21	; 0x01
    2fea:	48 83       	st	Y, r20
    2fec:	22 81       	ldd	r18, Z+2	; 0x02
    2fee:	33 81       	ldd	r19, Z+3	; 0x03
    2ff0:	10 97       	sbiw	r26, 0x00	; 0
    2ff2:	29 f0       	breq	.+10     	; 0x2ffe <realloc+0xce>
    2ff4:	13 96       	adiw	r26, 0x03	; 3
    2ff6:	3c 93       	st	X, r19
    2ff8:	2e 93       	st	-X, r18
    2ffa:	12 97       	sbiw	r26, 0x02	; 2
    2ffc:	61 c0       	rjmp	.+194    	; 0x30c0 <realloc+0x190>
    2ffe:	30 93 81 01 	sts	0x0181, r19
    3002:	20 93 80 01 	sts	0x0180, r18
    3006:	5c c0       	rjmp	.+184    	; 0x30c0 <realloc+0x190>
    3008:	22 50       	subi	r18, 0x02	; 2
    300a:	30 40       	sbci	r19, 0x00	; 0
    300c:	2c 19       	sub	r18, r12
    300e:	3d 09       	sbc	r19, r13
    3010:	31 83       	std	Z+1, r19	; 0x01
    3012:	20 83       	st	Z, r18
    3014:	10 97       	sbiw	r26, 0x00	; 0
    3016:	29 f0       	breq	.+10     	; 0x3022 <realloc+0xf2>
    3018:	13 96       	adiw	r26, 0x03	; 3
    301a:	fc 93       	st	X, r31
    301c:	ee 93       	st	-X, r30
    301e:	12 97       	sbiw	r26, 0x02	; 2
    3020:	04 c0       	rjmp	.+8      	; 0x302a <realloc+0xfa>
    3022:	f0 93 81 01 	sts	0x0181, r31
    3026:	e0 93 80 01 	sts	0x0180, r30
    302a:	f7 01       	movw	r30, r14
    302c:	71 83       	std	Z+1, r23	; 0x01
    302e:	60 83       	st	Z, r22
    3030:	47 c0       	rjmp	.+142    	; 0x30c0 <realloc+0x190>
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	c8 17       	cp	r28, r24
    3038:	d9 07       	cpc	r29, r25
    303a:	08 f4       	brcc	.+2      	; 0x303e <realloc+0x10e>
    303c:	ec 01       	movw	r28, r24
    303e:	df 01       	movw	r26, r30
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	93 81       	ldd	r25, Z+3	; 0x03
    3044:	9c 01       	movw	r18, r24
    3046:	f9 01       	movw	r30, r18
    3048:	30 97       	sbiw	r30, 0x00	; 0
    304a:	09 f0       	breq	.+2      	; 0x304e <realloc+0x11e>
    304c:	bb cf       	rjmp	.-138    	; 0x2fc4 <realloc+0x94>
    304e:	40 0f       	add	r20, r16
    3050:	51 1f       	adc	r21, r17
    3052:	80 91 7e 01 	lds	r24, 0x017E
    3056:	90 91 7f 01 	lds	r25, 0x017F
    305a:	84 17       	cp	r24, r20
    305c:	95 07       	cpc	r25, r21
    305e:	e9 f4       	brne	.+58     	; 0x309a <realloc+0x16a>
    3060:	c6 17       	cp	r28, r22
    3062:	d7 07       	cpc	r29, r23
    3064:	d0 f4       	brcc	.+52     	; 0x309a <realloc+0x16a>
    3066:	20 91 6c 01 	lds	r18, 0x016C
    306a:	30 91 6d 01 	lds	r19, 0x016D
    306e:	21 15       	cp	r18, r1
    3070:	31 05       	cpc	r19, r1
    3072:	41 f4       	brne	.+16     	; 0x3084 <realloc+0x154>
    3074:	2d b7       	in	r18, 0x3d	; 61
    3076:	3e b7       	in	r19, 0x3e	; 62
    3078:	80 91 68 01 	lds	r24, 0x0168
    307c:	90 91 69 01 	lds	r25, 0x0169
    3080:	28 1b       	sub	r18, r24
    3082:	39 0b       	sbc	r19, r25
    3084:	a2 16       	cp	r10, r18
    3086:	b3 06       	cpc	r11, r19
    3088:	c8 f4       	brcc	.+50     	; 0x30bc <realloc+0x18c>
    308a:	b0 92 7f 01 	sts	0x017F, r11
    308e:	a0 92 7e 01 	sts	0x017E, r10
    3092:	e7 01       	movw	r28, r14
    3094:	79 83       	std	Y+1, r23	; 0x01
    3096:	68 83       	st	Y, r22
    3098:	13 c0       	rjmp	.+38     	; 0x30c0 <realloc+0x190>
    309a:	cb 01       	movw	r24, r22
    309c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <malloc>
    30a0:	ec 01       	movw	r28, r24
    30a2:	00 97       	sbiw	r24, 0x00	; 0
    30a4:	59 f0       	breq	.+22     	; 0x30bc <realloc+0x18c>
    30a6:	f7 01       	movw	r30, r14
    30a8:	40 81       	ld	r20, Z
    30aa:	51 81       	ldd	r21, Z+1	; 0x01
    30ac:	b8 01       	movw	r22, r16
    30ae:	0e 94 66 18 	call	0x30cc	; 0x30cc <memcpy>
    30b2:	c8 01       	movw	r24, r16
    30b4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <free>
    30b8:	8e 01       	movw	r16, r28
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <realloc+0x190>
    30bc:	00 e0       	ldi	r16, 0x00	; 0
    30be:	10 e0       	ldi	r17, 0x00	; 0
    30c0:	c8 01       	movw	r24, r16
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	ec e0       	ldi	r30, 0x0C	; 12
    30c8:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__epilogue_restores__+0xc>

000030cc <memcpy>:
    30cc:	fb 01       	movw	r30, r22
    30ce:	dc 01       	movw	r26, r24
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <memcpy+0xa>
    30d2:	01 90       	ld	r0, Z+
    30d4:	0d 92       	st	X+, r0
    30d6:	41 50       	subi	r20, 0x01	; 1
    30d8:	50 40       	sbci	r21, 0x00	; 0
    30da:	d8 f7       	brcc	.-10     	; 0x30d2 <memcpy+0x6>
    30dc:	08 95       	ret

000030de <_exit>:
    30de:	f8 94       	cli

000030e0 <__stop_program>:
    30e0:	ff cf       	rjmp	.-2      	; 0x30e0 <__stop_program>
